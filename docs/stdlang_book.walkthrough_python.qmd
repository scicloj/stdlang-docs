---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    output-file: stdlang_book.walkthrough_python.html
code-block-background: true
fontsize: 0.9em

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="stdlang_book.walkthrough_python_files/md-default0.js" type="text/javascript"></script><script src="stdlang_book.walkthrough_python_files/md-default1.js" type="text/javascript"></script>

# Python Walkthrough

Welcome to the walkthrough of std.lang and it's interaction with the python runtime.
Ideally, the reader should have at least some experience with both clojure and python
in order to get the most out of the tutorial as the library allows for seamless interop between
a clojure runtime and a python one - whether it is on the server side - node, quickjs, osascript - as well as on the browser and other embedded js environments.



## Setup

Let us briefly explore the std.lang transpiler.


::: {.sourceClojure}
```clojure
(ns stdlang-book.walkthrough-python
  (:require [std.lang :as l]))
```
:::


std.lang can be used in different ways:
- generate code for different languages
- run the code in different runtimes of those languages

To specify a way to use it, we use `l/script`. This will create a runtime
for evaluation.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script :python
  {:require [[xt.lang.base-lib :as k]
             [xt.lang.base-iter :as it]]})
```
:::



::: {.printedClojure}
```clojure
#rt:lang[:python]

```
:::


It is now possible to transpile lisp forms to code:


::: {.sourceClojure}
```clojure
(!.py
  (+ 1 2 3))
```
:::



::: {.printedClojure}
```clojure
"1 + 2 + 3"

```
:::


If more than one environment is required, `l/script+` is a way to create an annex
that 

In For example, let us define the following two annexes, named `:code` and `:live`.

Here we define `:code` as a way to use the transpiler
to generate Python code, but not use it in any runtime.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script+ [:code :python]
  {:require [[xt.lang.base-lib :as k]
             [xt.lang.base-iter :as it]]})
```
:::



::: {.printedClojure}
```clojure
[#rt:lang[:python]]

```
:::


Here we define `:live` as a way to use the transpiler
go generate Python code, and run it in a Node.js runtime.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script+ [:live :python]
  {:runtime :basic
   :require [[xt.lang.base-lib :as k]
             [xt.lang.base-iter :as it]]})
```
:::



::: {.printedClojure}
```clojure
[#rt.basic[:server/basic :python s4pmalja1baa 53495 1]]

```
:::


Let us now use these two ways for basic arithmetic.


::: {.sourceClojure}
```clojure
[ ;; No runtime, just generating code:
 (l/! [:code] (+ 1 2))
 ;; Generating, running in Node.js:
 (l/! [:live] (+ 1 2))]
```
:::



::: {.printedClojure}
```clojure
["1 + 2" 3]

```
:::



# Types


## Types - Primitives


### Null

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
nil
```"></span></td><td><span data-qmd="```python
None
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### Boolean

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
true
```"></span></td><td><span data-qmd="```python
True
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
false
```"></span></td><td><span data-qmd="```python
False
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Strings

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
&quot;3&quot;
```"></span></td><td><span data-qmd="```python
&quot;3&quot;
```"></span></td><td><span data-qmd="```clj
&quot;3&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
&quot;Hello World&quot;
```"></span></td><td><span data-qmd="```python
&quot;Hello World&quot;
```"></span></td><td><span data-qmd="```clj
&quot;Hello World&quot;
```"></span></td></tr></tbody></table>
```

:::



### Numbers

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
3
```"></span></td><td><span data-qmd="```python
3
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
1.5
```"></span></td><td><span data-qmd="```python
1.5
```"></span></td><td><span data-qmd="```clj
1.5
```"></span></td></tr><tr><td><span data-qmd="```clj
1.54444444444444
```"></span></td><td><span data-qmd="```python
1.54444444444444
```"></span></td><td><span data-qmd="```clj
1.54444444444444
```"></span></td></tr></tbody></table>
```

:::



### Regex

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
#&quot;^[Hh]ello d$&quot;
```"></span></td><td><span data-qmd="```python
#&quot;^[Hh]ello d$&quot;
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



## Types - Collection


### Lists

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td><td><span data-qmd="```python
[1,2,3,4]
```"></span></td><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td></tr><tr><td><span data-qmd="```clj
[&quot;hello&quot; [&quot;world&quot;]]
```"></span></td><td><span data-qmd="```python
[&quot;hello&quot;,[&quot;world&quot;]]
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; [&quot;world&quot;]]
```"></span></td></tr></tbody></table>
```

:::



### Dicts

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
{:a 1, :b 2, :c 3}
```"></span></td><td><span data-qmd="```python
{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr><tr><td><span data-qmd="```clj
{:a {:b {:c 3}}}
```"></span></td><td><span data-qmd="```python
{&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:3}}}
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; {&quot;c&quot; 3}}}
```"></span></td></tr></tbody></table>
```

:::



### Tuples

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(quote (1 2 3 4))
```"></span></td><td><span data-qmd="```python
(1,2,3,4)
```"></span></td><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td></tr><tr><td><span data-qmd="```clj
(quote (&quot;hello&quot; [&quot;world&quot;]))
```"></span></td><td><span data-qmd="```python
(&quot;hello&quot;,[&quot;world&quot;])
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; [&quot;world&quot;]]
```"></span></td></tr></tbody></table>
```

:::



### Tuples

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
#{1 4 3 2}
```"></span></td><td><span data-qmd="```python
{1,4,3,2}
```"></span></td><td><span data-qmd="```clj

{1, 2, 3, 4}
```"></span></td></tr><tr><td><span data-qmd="```clj
#{&quot;hello&quot; &quot;world&quot;}
```"></span></td><td><span data-qmd="```python
{&quot;hello&quot;,&quot;world&quot;}
```"></span></td><td><span data-qmd="```clj

{&apos;world&apos;, &apos;hello&apos;}
```"></span></td></tr></tbody></table>
```

:::



### Objects - tab

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(tab [&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3])
```"></span></td><td><span data-qmd="```python
{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



## Types - Checks


# Operations


## Operations - Assignment


### Var

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 1) x)
```"></span></td><td><span data-qmd="```python
x = 1
x
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### Reassign

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 1) (:= x 10) x)
```"></span></td><td><span data-qmd="```python
x = 1
x = 10
x
```"></span></td><td><span data-qmd="```clj
10
```"></span></td></tr></tbody></table>
```

:::



## Operations - Logic


### Negation

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(not true)
```"></span></td><td><span data-qmd="```python
not True
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(not false)
```"></span></td><td><span data-qmd="```python
not False
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(not 1)
```"></span></td><td><span data-qmd="```python
not 1
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(not 0)
```"></span></td><td><span data-qmd="```python
not 0
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### Or

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(or 0 false)
```"></span></td><td><span data-qmd="```python
0 or False
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(or 1 false)
```"></span></td><td><span data-qmd="```python
1 or False
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(or 0 true)
```"></span></td><td><span data-qmd="```python
0 or True
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### And

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(and 0 false)
```"></span></td><td><span data-qmd="```python
0 and False
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr><tr><td><span data-qmd="```clj
(and 1 false)
```"></span></td><td><span data-qmd="```python
1 and False
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(and 0 true)
```"></span></td><td><span data-qmd="```python
0 and True
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### Ternary

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(:? true 1 2)
```"></span></td><td><span data-qmd="```python
True and 1 or 2
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(:? (or 0 0) 1 2)
```"></span></td><td><span data-qmd="```python
(0 or 0) and 1 or 2
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



## Operations - Math


### Addition

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(+ 1 2 3)
```"></span></td><td><span data-qmd="```python
1 + 2 + 3
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr><tr><td><span data-qmd="```clj
(+ 1 10)
```"></span></td><td><span data-qmd="```python
1 + 10
```"></span></td><td><span data-qmd="```clj
11
```"></span></td></tr></tbody></table>
```

:::



### Subtraction 

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(- 10)
```"></span></td><td><span data-qmd="```python
-10
```"></span></td><td><span data-qmd="```clj
-10
```"></span></td></tr><tr><td><span data-qmd="```clj
(- 10 1.1)
```"></span></td><td><span data-qmd="```python
10 - 1.1
```"></span></td><td><span data-qmd="```clj
8.9
```"></span></td></tr><tr><td><span data-qmd="```clj
(- 4 3 2 1.1)
```"></span></td><td><span data-qmd="```python
4 - 3 - 2 - 1.1
```"></span></td><td><span data-qmd="```clj
-2.1
```"></span></td></tr></tbody></table>
```

:::



### Multiplication

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(* 10 20)
```"></span></td><td><span data-qmd="```python
10 * 20
```"></span></td><td><span data-qmd="```clj
200
```"></span></td></tr><tr><td><span data-qmd="```clj
(* 4 3.3 2.2 1.1)
```"></span></td><td><span data-qmd="```python
4 * 3.3 * 2.2 * 1.1
```"></span></td><td><span data-qmd="```clj
31.944000000000003
```"></span></td></tr></tbody></table>
```

:::



### Division

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(/ 10)
```"></span></td><td><span data-qmd="```python
1 / 10
```"></span></td><td><span data-qmd="```clj
0.1
```"></span></td></tr><tr><td><span data-qmd="```clj
(/ 10 20)
```"></span></td><td><span data-qmd="```python
10 / 20
```"></span></td><td><span data-qmd="```clj
0.5
```"></span></td></tr><tr><td><span data-qmd="```clj
(/ 4 3.3 2.2 1.1)
```"></span></td><td><span data-qmd="```python
4 / 3.3 / 2.2 / 1.1
```"></span></td><td><span data-qmd="```clj
0.5008765339343851
```"></span></td></tr></tbody></table>
```

:::



### Pow

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(pow 10 2)
```"></span></td><td><span data-qmd="```python
10 ** 2
```"></span></td><td><span data-qmd="```clj
100
```"></span></td></tr><tr><td><span data-qmd="```clj
(pow 0.5 0.2)
```"></span></td><td><span data-qmd="```python
0.5 ** 0.2
```"></span></td><td><span data-qmd="```clj
0.8705505632961241
```"></span></td></tr></tbody></table>
```

:::



### Mod

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(mod 1123 7)
```"></span></td><td><span data-qmd="```python
1123 % 7
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(mod 1123 7.1)
```"></span></td><td><span data-qmd="```python
1123 % 7.1
```"></span></td><td><span data-qmd="```clj
1.2000000000000561
```"></span></td></tr></tbody></table>
```

:::



## Operations - Comparison


### Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(== 1 1)
```"></span></td><td><span data-qmd="```python
1 == 1
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(== 1 &quot;1&quot;)
```"></span></td><td><span data-qmd="```python
1 == &quot;1&quot;
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(== &quot;hello&quot; &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello&quot; == &quot;hello&quot;
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### Not Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(not= 1 2)
```"></span></td><td><span data-qmd="```python
1 != 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(not= 1 &quot;1&quot;)
```"></span></td><td><span data-qmd="```python
1 != &quot;1&quot;
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(not= &quot;hello&quot; &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello&quot; != &quot;hello&quot;
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Less Than

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&lt; 1 2)
```"></span></td><td><span data-qmd="```python
1 &lt; 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&lt; 1 1)
```"></span></td><td><span data-qmd="```python
1 &lt; 1
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Less Than Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&lt;= 1 2)
```"></span></td><td><span data-qmd="```python
1 &lt;= 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&lt;= 1 1)
```"></span></td><td><span data-qmd="```python
1 &lt;= 1
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### Greater Than

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&gt; 3 2)
```"></span></td><td><span data-qmd="```python
3 &gt; 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&gt; 3 3)
```"></span></td><td><span data-qmd="```python
3 &gt; 3
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Greater Than Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&gt;= 3 2)
```"></span></td><td><span data-qmd="```python
3 &gt;= 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&gt;= 3 3)
```"></span></td><td><span data-qmd="```python
3 &gt;= 3
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



## Operations - Counter


### Increment

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 1) (:++ x) x)
```"></span></td><td><span data-qmd="```python
x = 1
++x
x
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### Increment By

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 1) (:+= x 10) x)
```"></span></td><td><span data-qmd="```python
x = 1
x += 10
x
```"></span></td><td><span data-qmd="```clj
11
```"></span></td></tr></tbody></table>
```

:::



### Decrement

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 5) (:-- x) x)
```"></span></td><td><span data-qmd="```python
x = 5
--x
x
```"></span></td><td><span data-qmd="```clj
5
```"></span></td></tr></tbody></table>
```

:::



### Decrement By

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 5) (:-= x 50) x)
```"></span></td><td><span data-qmd="```python
x = 5
x -= 50
x
```"></span></td><td><span data-qmd="```clj
-45
```"></span></td></tr></tbody></table>
```

:::



### Multiply By

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 5) (:*= x 50) x)
```"></span></td><td><span data-qmd="```python
x = 5
x *= 50
x
```"></span></td><td><span data-qmd="```clj
250
```"></span></td></tr></tbody></table>
```

:::



## Operations - Bitwise


### Bitwise Or

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(b:| 7 8)
```"></span></td><td><span data-qmd="```python
7 | 8
```"></span></td><td><span data-qmd="```clj
15
```"></span></td></tr><tr><td><span data-qmd="```clj
(b:| 7 7)
```"></span></td><td><span data-qmd="```python
7 | 7
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr><tr><td><span data-qmd="```clj
(b:| 7 0)
```"></span></td><td><span data-qmd="```python
7 | 0
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr></tbody></table>
```

:::



### Bitwise And

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(b:&amp; 7 8)
```"></span></td><td><span data-qmd="```python
7 &amp; 8
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr><tr><td><span data-qmd="```clj
(b:&amp; 7 7)
```"></span></td><td><span data-qmd="```python
7 &amp; 7
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr><tr><td><span data-qmd="```clj
(b:&amp; 7 0)
```"></span></td><td><span data-qmd="```python
7 &amp; 0
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### Bitwise Xor

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(b:xor 7 8)
```"></span></td><td><span data-qmd="```python
7 ^ 8
```"></span></td><td><span data-qmd="```clj
15
```"></span></td></tr><tr><td><span data-qmd="```clj
(b:xor 7 7)
```"></span></td><td><span data-qmd="```python
7 ^ 7
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr><tr><td><span data-qmd="```clj
(b:xor 7 0)
```"></span></td><td><span data-qmd="```python
7 ^ 0
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr></tbody></table>
```

:::



### Bitshift Right

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(b:&gt;&gt; 128 3)
```"></span></td><td><span data-qmd="```python
128 &gt;&gt; 3
```"></span></td><td><span data-qmd="```clj
16
```"></span></td></tr></tbody></table>
```

:::



### Bitshift Left

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(b:&lt;&lt; 128 3)
```"></span></td><td><span data-qmd="```python
128 &lt;&lt; 3
```"></span></td><td><span data-qmd="```clj
1024
```"></span></td></tr></tbody></table>
```

:::



## Operations - Functions

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(fn [x y] (return (+ x y)))
```"></span></td><td><span data-qmd="```python
lambda x,y : x + y
```"></span></td><td><span data-qmd="```clj

&lt;function OUT_FN.&lt;locals&gt;.&lt;lambda&gt; at 0x1050d5a80&gt;
```"></span></td></tr><tr><td><span data-qmd="```clj
(do (var hello (fn [x y] (return (+ x y)))) (hello 1 2))
```"></span></td><td><span data-qmd="```python
def hello(x,y):
  return x + y
hello(1,2)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



## Operations - Blocks


### if block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var arr [1 2 3 4 5]) (var out) (if (&lt; (x:len arr) 10) (:= out true) (:= out false)) out)
```"></span></td><td><span data-qmd="```python
arr = [1,2,3,4,5]
out = None
if len(arr) &lt; 10:
  out = True
else:
  out = False
out
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### cond block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var arr [1 2 3 4 5]) (var out) (cond (&lt; (x:len arr) 5) (:= out &quot;1&quot;) (&lt; (x:len arr) 10) (:= out &quot;2&quot;) :else (:= out &quot;3&quot;)) out)
```"></span></td><td><span data-qmd="```python
arr = [1,2,3,4,5]
out = None
if len(arr) &lt; 5:
  out = &quot;1&quot;
elif len(arr) &lt; 10:
  out = &quot;2&quot;
else:
  out = &quot;3&quot;
out
```"></span></td><td><span data-qmd="```clj
&quot;2&quot;
```"></span></td></tr></tbody></table>
```

:::



### while block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x []) (var i 0) (while (&lt; i 5) (x:arr-push x i) (:++ i)) x)
```"></span></td><td><span data-qmd="```python
x = []
i = 0
while i &lt; 5:
  x.append(i)
  ++i
x
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



### for block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var arr []) (for [(var i 1) (&lt; i 5) (:++ i)] (x:arr-push arr i)) arr)
```"></span></td><td><span data-qmd="```python
arr = []
for i = 1, i &lt; 5, ++i:
  arr.append(i)
arr
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



### case block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var arr 1) (var out) (case arr 1 (do (:= out 1) (break)) 2 (do (:= out 2) (break))) out)
```"></span></td><td><span data-qmd="```python
arr = 1
out = None
switch arr:
  case 1:
    out = 1
    break
  case 2:
    out = 2
    break

out
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



### try/catch block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out &quot;hello&quot;) (try (throw 1) (catch e (:= out &quot;world&quot;))) out)
```"></span></td><td><span data-qmd="```python
out = &quot;hello&quot;
try:
  raise 1
except e:
  out = &quot;world&quot;
out
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



# Base Lib


## Base Lib - For 


### for:array

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := []) (k/for:array [e [1 2 3 4]] (if (&gt; e 3) (break)) (x:arr-push out e)) out)
```"></span></td><td><span data-qmd="```python
out = []
for e in  1, 2, 3, 4:
  if e &gt; 3:
    break
  out.append(e)
out
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



### for:object

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := []) (var obj := {:a 1, :b 2}) (k/for:object [[k v] obj] (x:arr-push out [k v])) out)
```"></span></td><td><span data-qmd="```python
out = []
obj = {&quot;a&quot;:1,&quot;b&quot;:2}
for k, v in  obj.items():
  out.append([k,v])
out
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



### for:index

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := []) (k/for:index [i [0 10 2]] (x:arr-push out i)) out)
```"></span></td><td><span data-qmd="```python
out = []
for i in range(0,10,2):
  out.append(i)
out
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



### for:return

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out) (var success (fn [cb] (cb nil &quot;OK&quot;))) (k/for:return [[ret err] (success (x:callback))] {:success (:= out ret), :error (:= out err)}) out)
```"></span></td><td><span data-qmd="```python
out = None
def success(cb):
  cb(None,&quot;OK&quot;)
try:
  ret = success(None)
  out = ret
except Exception as err:
  out = err
out
```"></span></td><td><span data-qmd="```clj


```"></span></td></tr></tbody></table>
```

:::



::: {.printedClojure}
```clojure
{:code
 [nil
  {:lang :python,
   :redirect nil,
   :context :lang/python,
   :runtime :default,
   :module stdlang-book.walkthrough-python,
   :module/internal
   {xt.lang.base-lib k,
    xt.lang.base-iter it,
    stdlang-book.walkthrough-python -},
   :module/primary #{}}],
 :live
 [nil
  {:id "uve52kx9hsfp",
   :layout :full,
   :bench
   {:type :bench/basic,
    :lang :python,
    :program nil,
    :port 53527,
    :host "127.0.0.1",
    :process
    #object[java.lang.ProcessImpl 0x177162fd "Process[pid=19006, exitValue=\"not exited\"]"],
    :thread
    #object[java.util.concurrent.CompletableFuture 0x1db1430f "java.util.concurrent.CompletableFuture@1db1430f[Not completed]"],
    :root-dir
    "/var/folders/1t/81x6sszx3tl2q7kz2g1681c80000gn/T/11652873995325769020"},
   :process
   {:bootstrap #'rt.basic.impl.process-python/default-basic-client,
    :main {},
    :emit
    {:body
     {:transform
      #'rt.basic.impl.process-python/default-body-transform}},
    :json :full,
    :encode :json,
    :timeout 2000},
   :lifecycle
   {:bootstrap #'rt.basic.impl.process-python/default-basic-client,
    :main {},
    :emit
    {:body
     {:transform
      #'rt.basic.impl.process-python/default-body-transform}},
    :json :full,
    :encode :json,
    :timeout 2000},
   :module stdlang-book.walkthrough-python,
   :lang :python,
   :module/internal
   {xt.lang.base-lib k,
    xt.lang.base-iter it,
    stdlang-book.walkthrough-python -},
   :runtime :basic,
   :context :lang/python,
   :module/primary #{},
   :tag :basic}]}

```
:::



## Base Lib - Util


### invoke

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/invoke k/add 1 2)
```"></span></td><td><span data-qmd="```python
1 + 2
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### unpack

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/unpack [1 2 3]) (k/unpack [4 5 6])]
```"></span></td><td><span data-qmd="```python
[*[1,2,3],*[4,5,6]]
```"></span></td><td><span data-qmd="```clj
[1 2 3 4 5 6]
```"></span></td></tr></tbody></table>
```

:::



### apply

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/apply (fn:&gt; [a b] (+ a b)) [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a + b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### eval

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/eval &quot;1+2&quot;)
```"></span></td><td><span data-qmd="```python
eval(&quot;1+2&quot;)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/eval [&quot;1+2&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s : eval(s))(*[&quot;1+2&quot;])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### len

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/len &quot;1+2&quot;)
```"></span></td><td><span data-qmd="```python
len((&quot;1+2&quot;))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/len [&quot;1+2&quot;])
```"></span></td><td><span data-qmd="```python
(lambda arr : len((arr)))(*[&quot;1+2&quot;])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### cat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/cat &quot;1+2&quot; &quot;+3&quot;)
```"></span></td><td><span data-qmd="```python
&quot;1+2&quot; + &quot;+3&quot;
```"></span></td><td><span data-qmd="```clj
&quot;1+2+3&quot;
```"></span></td></tr></tbody></table>
```

:::



### x:del

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out {:a 1}) (k/x:del (. out [&quot;a&quot;])) out)
```"></span></td><td><span data-qmd="```python
out = {&quot;a&quot;:1}
del out[&quot;a&quot;]
out
```"></span></td><td><span data-qmd="```clj
{}
```"></span></td></tr></tbody></table>
```

:::



### x:shell

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var cb {}) (defn call [] (k/x:shell &quot;ls&quot; cb)) (call))
```"></span></td><td><span data-qmd="```python
cb = {}
def call():
  res = __import__(&quot;os&quot;).system(&quot;ls&quot;)
  f = cb.get(&quot;success&quot;)
  if f:
    return f(res)
  else:
    return res
call()
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### x:offset

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset)
```"></span></td><td><span data-qmd="```python
0
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### x:offset-rev

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset-rev)
```"></span></td><td><span data-qmd="```python
-1
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### x:offset-len

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset-len 10)
```"></span></td><td><span data-qmd="```python
9
```"></span></td><td><span data-qmd="```clj
9
```"></span></td></tr></tbody></table>
```

:::



### x:offset-rlen

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset-rlen 10)
```"></span></td><td><span data-qmd="```python
10
```"></span></td><td><span data-qmd="```clj
10
```"></span></td></tr></tbody></table>
```

:::



### nil?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/nil? &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
None == &quot;hello&quot;
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/nil? [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```python
(lambda x : None == x)(*[&quot;hello&quot;])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### not-nil?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/not-nil? &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
None != &quot;hello&quot;
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/not-nil? [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```python
(lambda x : None != x)(*[&quot;hello&quot;])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### to-string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-string 1)
```"></span></td><td><span data-qmd="```python
str(1)
```"></span></td><td><span data-qmd="```clj
&quot;1&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-string [1])
```"></span></td><td><span data-qmd="```python
(lambda obj : str(obj))(*[1])
```"></span></td><td><span data-qmd="```clj
&quot;1&quot;
```"></span></td></tr></tbody></table>
```

:::



### to-number

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-number &quot;1.1&quot;)
```"></span></td><td><span data-qmd="```python
float(&quot;1.1&quot;)
```"></span></td><td><span data-qmd="```clj
1.1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-number [&quot;1.1&quot;])
```"></span></td><td><span data-qmd="```python
(lambda obj : float(obj))(*[&quot;1.1&quot;])
```"></span></td><td><span data-qmd="```clj
1.1
```"></span></td></tr></tbody></table>
```

:::



### is-string?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-string? &quot;1.1&quot;)
```"></span></td><td><span data-qmd="```python
isinstance(&quot;1.1&quot;,str)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-string? [&quot;1.1&quot;])
```"></span></td><td><span data-qmd="```python
(lambda obj : isinstance(obj,str))(*[&quot;1.1&quot;])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-number?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-number? 1.1)
```"></span></td><td><span data-qmd="```python
isinstance(1.1,(int,float))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-number? [1.1])
```"></span></td><td><span data-qmd="```python
(lambda obj : isinstance(obj,(int,float)))(*[1.1])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-integer?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-integer? 1000)
```"></span></td><td><span data-qmd="```python
isinstance(1000,(int))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-integer? [1000])
```"></span></td><td><span data-qmd="```python
(lambda obj : isinstance(obj,(int)))(*[1000])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-boolean?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-boolean? false)
```"></span></td><td><span data-qmd="```python
bool == type(False)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-boolean? [false])
```"></span></td><td><span data-qmd="```python
(lambda obj : bool == type(obj))(*[False])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-function?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-function? (fn [] (return 1)))
```"></span></td><td><span data-qmd="```python
callable(lambda : 1)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-function? [(fn [] (return 1))])
```"></span></td><td><span data-qmd="```python
(lambda x : callable(x))(*[lambda : 1])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-array?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-array? [1 2 3 4 5])
```"></span></td><td><span data-qmd="```python
isinstance([1,2,3,4,5],list)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-array? [[1 2 3 4 5]])
```"></span></td><td><span data-qmd="```python
(lambda x : isinstance(x,list))(*[[1,2,3,4,5]])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-object?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-object? {:a 1, :b 2})
```"></span></td><td><span data-qmd="```python
isinstance({&quot;a&quot;:1,&quot;b&quot;:2},dict)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-object? [{:a 1, :b 2}])
```"></span></td><td><span data-qmd="```python
(lambda x : isinstance(x,dict))(*[{&quot;a&quot;:1,&quot;b&quot;:2}])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### type-native

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do [(k/type-native {}) (k/type-native [1]) (k/type-native (fn [])) (k/type-native 1) (k/type-native &quot;&quot;) (k/type-native true)])
```"></span></td><td><span data-qmd="```python
[
  k.type_native({}),
  k.type_native([1]),
  k.type_native(lambda : None),
  k.type_native(1),
  k.type_native(&quot;&quot;),
  k.type_native(True)
]
```"></span></td><td><span data-qmd="```clj
[&quot;object&quot; &quot;array&quot; &quot;function&quot; &quot;number&quot; &quot;string&quot; &quot;boolean&quot;]
```"></span></td></tr></tbody></table>
```

:::



### type-class

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do [(k/type-class {}) (k/type-class [1]) (k/type-class (fn [])) (k/type-class 1) (k/type-class &quot;&quot;) (k/type-class true)])
```"></span></td><td><span data-qmd="```python
[
  k.type_class({}),
  k.type_class([1]),
  k.type_class(lambda : None),
  k.type_class(1),
  k.type_class(&quot;&quot;),
  k.type_class(True)
]
```"></span></td><td><span data-qmd="```clj
[&quot;object&quot; &quot;array&quot; &quot;function&quot; &quot;number&quot; &quot;string&quot; &quot;boolean&quot;]
```"></span></td></tr></tbody></table>
```

:::



### print

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/print &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
print(&quot;hello&quot;)
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/print [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```python
print(*[&quot;hello&quot;])
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### random

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/random)
```"></span></td><td><span data-qmd="```python
__import__(&quot;random&quot;).random()
```"></span></td><td><span data-qmd="```clj
0.6271231033828897
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/random [])
```"></span></td><td><span data-qmd="```python
(lambda : __import__(&quot;random&quot;).random())(*[])
```"></span></td><td><span data-qmd="```clj
0.3686332491472023
```"></span></td></tr></tbody></table>
```

:::



### now-ms

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/now-ms)
```"></span></td><td><span data-qmd="```python
round(1000 * __import__(&quot;time&quot;).time())
```"></span></td><td><span data-qmd="```clj
1745738961896
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/now-ms [])
```"></span></td><td><span data-qmd="```python
(lambda : round(1000 * __import__(&quot;time&quot;).time()))(*[])
```"></span></td><td><span data-qmd="```clj
1745738961932
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Global


### !:G

Accesses the global object

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
!:G
```"></span></td><td><span data-qmd="```python
globals()
```"></span></td><td><span data-qmd="```clj

{&apos;__name__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None, &apos;__package__&apos;: None, &apos;__loader__&apos;: &lt;class &apos;_frozen_importlib.BuiltinImporter&apos;&gt;, &apos;__spec__&apos;: None, &apos;__annotations__&apos;: {}, &apos;__builtins__&apos;: &lt;module &apos;builtins&apos; (built-in)&gt;, &apos;return_encode&apos;: &lt;function return_encode at 0x10280e3e0&gt;, &apos;return_wrap&apos;: &lt;function return_wrap at 0x102861800&gt;, &apos;return_eval&apos;: &lt;function return_eval at 0x102889760&gt;, &apos;client_basic&apos;: &lt;function client_basic at 0x102889800&gt;, &apos;OUT_FN&apos;: &lt;function OUT_FN at 0x1029c4e00&gt;, &apos;OUT&apos;: {...}, &apos;xt_lang_base_lib____type_native&apos;: &lt;function xt_lang_base_lib____type_native at 0x102920cc0&gt;, &apos;xt_lang_base_lib____type_class&apos;: &lt;function xt_lang_base_lib____type_class at 0x1029c4cc0&gt;}
```"></span></td></tr></tbody></table>
```

:::



### global-set

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (k/global-set &quot;HELLO&quot; 1) (. !:G [&quot;HELLO&quot;]))
```"></span></td><td><span data-qmd="```python
globals()[&quot;HELLO&quot;] = 1
globals()[&quot;HELLO&quot;]
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### global-has?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (k/global-set &quot;HELLO&quot; 1) (k/global-has? &quot;HELLO&quot;))
```"></span></td><td><span data-qmd="```python
globals()[&quot;HELLO&quot;] = 1
not (None == globals().get(&quot;HELLO&quot;))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### global-del

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (k/global-del &quot;HELLO&quot;) (k/global-has? &quot;HELLO&quot;))
```"></span></td><td><span data-qmd="```python
globals()[&quot;HELLO&quot;] = None
not (None == globals().get(&quot;HELLO&quot;))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



::: {.printedClojure}
```clojure
{:code
 [nil
  {:lang :python,
   :redirect nil,
   :context :lang/python,
   :runtime :default,
   :module stdlang-book.walkthrough-python,
   :module/internal
   {xt.lang.base-lib k,
    xt.lang.base-iter it,
    stdlang-book.walkthrough-python -},
   :module/primary #{}}],
 :live
 [nil
  {:id "1ji1r8nuuyxbt",
   :layout :full,
   :bench
   {:type :bench/basic,
    :lang :python,
    :program nil,
    :port 53531,
    :host "127.0.0.1",
    :process
    #object[java.lang.ProcessImpl 0x9ab0e47 "Process[pid=19014, exitValue=\"not exited\"]"],
    :thread
    #object[java.util.concurrent.CompletableFuture 0x4e8055b1 "java.util.concurrent.CompletableFuture@4e8055b1[Not completed]"],
    :root-dir
    "/var/folders/1t/81x6sszx3tl2q7kz2g1681c80000gn/T/10874245569694315180"},
   :process
   {:bootstrap #'rt.basic.impl.process-python/default-basic-client,
    :main {},
    :emit
    {:body
     {:transform
      #'rt.basic.impl.process-python/default-body-transform}},
    :json :full,
    :encode :json,
    :timeout 2000},
   :lifecycle
   {:bootstrap #'rt.basic.impl.process-python/default-basic-client,
    :main {},
    :emit
    {:body
     {:transform
      #'rt.basic.impl.process-python/default-body-transform}},
    :json :full,
    :encode :json,
    :timeout 2000},
   :module stdlang-book.walkthrough-python,
   :lang :python,
   :module/internal
   {xt.lang.base-lib k,
    xt.lang.base-iter it,
    stdlang-book.walkthrough-python -},
   :runtime :basic,
   :context :lang/python,
   :module/primary #{},
   :tag :basic}]}

```
:::



## Base Lib - String


### get-char

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-char &quot;abc&quot; 0)
```"></span></td><td><span data-qmd="```python
ord(&quot;abc&quot;[0])
```"></span></td><td><span data-qmd="```clj
97
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/get-char [&quot;abc&quot; 0])
```"></span></td><td><span data-qmd="```python
(lambda s,i : ord(s[i]))(*[&quot;abc&quot;,0])
```"></span></td><td><span data-qmd="```clj
97
```"></span></td></tr></tbody></table>
```

:::



### gt-string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/gt-string &quot;a&quot; &quot;b&quot;) (k/gt-string &quot;A&quot; &quot;a&quot;)]
```"></span></td><td><span data-qmd="```python
[&quot;b&quot; &lt; &quot;a&quot;,&quot;a&quot; &lt; &quot;A&quot;]
```"></span></td><td><span data-qmd="```clj
[false false]
```"></span></td></tr></tbody></table>
```

:::



### lt-string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/lt-string &quot;a&quot; &quot;b&quot;) (k/lt-string &quot;A&quot; &quot;a&quot;)]
```"></span></td><td><span data-qmd="```python
[&quot;a&quot; &lt; &quot;b&quot;,&quot;A&quot; &lt; &quot;a&quot;]
```"></span></td><td><span data-qmd="```clj
[true true]
```"></span></td></tr></tbody></table>
```

:::



### split

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/split &quot;hello/world&quot; &quot;/&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello/world&quot;.split(&quot;/&quot;)
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; &quot;world&quot;]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/split [&quot;hello/world&quot; &quot;/&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s,tok : s.split(tok))(*[&quot;hello/world&quot;,&quot;/&quot;])
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; &quot;world&quot;]
```"></span></td></tr></tbody></table>
```

:::



### join

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/join &quot;/&quot; [&quot;hello&quot; &quot;world&quot;])
```"></span></td><td><span data-qmd="```python
&quot;/&quot;.join([&quot;hello&quot;,&quot;world&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;hello/world&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/join [&quot;/&quot; [&quot;hello&quot; &quot;world&quot;]])
```"></span></td><td><span data-qmd="```python
(lambda s,arr : s.join(arr))(*[&quot;/&quot;,[&quot;hello&quot;,&quot;world&quot;]])
```"></span></td><td><span data-qmd="```clj
&quot;hello/world&quot;
```"></span></td></tr></tbody></table>
```

:::



### replace

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/replace &quot;hello/world&quot; &quot;/&quot; &quot;_&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello/world&quot;.replace(&quot;/&quot;,&quot;_&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;hello_world&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/replace [&quot;hello/world&quot; &quot;/&quot; &quot;_&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s,tok,replacement : s.replace(tok,replacement))(*[&quot;hello/world&quot;,&quot;/&quot;,&quot;_&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;hello_world&quot;
```"></span></td></tr></tbody></table>
```

:::



### index-of

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/index-of &quot;hello/world&quot; &quot;/&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello/world&quot;.find(&quot;/&quot;) - 0
```"></span></td><td><span data-qmd="```clj
5
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/index-of [&quot;hello/world&quot; &quot;/&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s,tok : s.find(tok) - 0)(*[&quot;hello/world&quot;,&quot;/&quot;])
```"></span></td><td><span data-qmd="```clj
5
```"></span></td></tr></tbody></table>
```

:::



### substring

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/substring &quot;hello/world&quot; 3) (k/substring &quot;hello/world&quot; 3 8)]
```"></span></td><td><span data-qmd="```python
[&quot;hello/world&quot;[3:],&quot;hello/world&quot;[3:8]]
```"></span></td><td><span data-qmd="```clj
[&quot;lo/world&quot; &quot;lo/wo&quot;]
```"></span></td></tr></tbody></table>
```

:::



### to-uppercase

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-uppercase &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello&quot;.upper()
```"></span></td><td><span data-qmd="```clj
&quot;HELLO&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-uppercase [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s : s.upper())(*[&quot;hello&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;HELLO&quot;
```"></span></td></tr></tbody></table>
```

:::



### to-lowercase

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-lowercase &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
&quot;hello&quot;.lower()
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-lowercase [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s : s.lower())(*[&quot;hello&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### starts-with?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/starts-with? &quot;Foo Bar&quot; &quot;Foo&quot;)
```"></span></td><td><span data-qmd="```python
k.starts_withp(&quot;Foo Bar&quot;,&quot;Foo&quot;)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### ends-with?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/ends-with? &quot;Foo Bar&quot; &quot;Bar&quot;)
```"></span></td><td><span data-qmd="```python
k.ends_withp(&quot;Foo Bar&quot;,&quot;Bar&quot;)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### capitalize

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/capitalize &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
k.capitalize(&quot;hello&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;Hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### decapitalize

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/decapitalize &quot;HELLO&quot;)
```"></span></td><td><span data-qmd="```python
k.decapitalize(&quot;HELLO&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;hELLO&quot;
```"></span></td></tr></tbody></table>
```

:::



### pad-left

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pad-left &quot;000&quot; 5 &quot;-&quot;)
```"></span></td><td><span data-qmd="```python
k.pad_left(&quot;000&quot;,5,&quot;-&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;--000&quot;
```"></span></td></tr></tbody></table>
```

:::



### pad-right

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pad-right &quot;000&quot; 5 &quot;-&quot;)
```"></span></td><td><span data-qmd="```python
k.pad_right(&quot;000&quot;,5,&quot;-&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;000--&quot;
```"></span></td></tr></tbody></table>
```

:::



### pad-lines

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pad-lines (k/join &quot;\n&quot; [&quot;hello&quot; &quot;world&quot;]) 2 &quot; &quot;)
```"></span></td><td><span data-qmd="```python
k.pad_lines(&quot;\n&quot;.join([&quot;hello&quot;,&quot;world&quot;]),2,&quot; &quot;)
```"></span></td><td><span data-qmd="```clj
&quot;  hello\n  world&quot;
```"></span></td></tr></tbody></table>
```

:::



### split-long

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/split-long &quot;1234567890123456789012345678901234567890123456789012345678901234567890&quot; 4)
```"></span></td><td><span data-qmd="```python
k.split_long(
  &quot;1234567890123456789012345678901234567890123456789012345678901234567890&quot;,
  4
)
```"></span></td><td><span data-qmd="```clj
[&quot;1234&quot; &quot;5678&quot; &quot;9012&quot; &quot;3456&quot; &quot;7890&quot; &quot;1234&quot; &quot;5678&quot; &quot;9012&quot; &quot;3456&quot; &quot;7890&quot; &quot;1234&quot; &quot;5678&quot; &quot;9012&quot; &quot;3456&quot; &quot;7890&quot; &quot;1234&quot; &quot;5678&quot; &quot;90&quot;]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Encode


### b64-encode

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/b64-encode &quot;hello&quot;)
```"></span></td><td><span data-qmd="```python
__import__(&quot;base64&quot;).b64encode(bytes(&quot;hello&quot;,&quot;utf-8&quot;)).decode(&quot;utf-8&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;aGVsbG8=&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/b64-encode [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s : __import__(&quot;base64&quot;).b64encode(bytes(s,&quot;utf-8&quot;)).decode(&quot;utf-8&quot;))(*[&quot;hello&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;aGVsbG8=&quot;
```"></span></td></tr></tbody></table>
```

:::



### b64-decode

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/b64-decode &quot;aGVsbG8=&quot;)
```"></span></td><td><span data-qmd="```python
__import__(&quot;base64&quot;).b64decode(&quot;aGVsbG8=&quot;).decode(&quot;utf-8&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/b64-decode [&quot;aGVsbG8=&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s : __import__(&quot;base64&quot;).b64decode(s).decode(&quot;utf-8&quot;))(*[&quot;aGVsbG8=&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### js-encode

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/js-encode [1 2 {:a [{:b 3}]}])
```"></span></td><td><span data-qmd="```python
__import__(&quot;json&quot;).dumps([1,2,{&quot;a&quot;:[{&quot;b&quot;:3}]}])
```"></span></td><td><span data-qmd="```clj
&quot;[1, 2, {\&quot;a\&quot;: [{\&quot;b\&quot;: 3}]}]&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/js-encode [[1 2 {:a [{:b 3}]}]])
```"></span></td><td><span data-qmd="```python
(lambda obj : __import__(&quot;json&quot;).dumps(obj))(*[[1,2,{&quot;a&quot;:[{&quot;b&quot;:3}]}]])
```"></span></td><td><span data-qmd="```clj
&quot;[1, 2, {\&quot;a\&quot;: [{\&quot;b\&quot;: 3}]}]&quot;
```"></span></td></tr></tbody></table>
```

:::



### js-decode

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/js-decode &quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;)
```"></span></td><td><span data-qmd="```python
__import__(&quot;json&quot;).loads(&quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;)
```"></span></td><td><span data-qmd="```clj
[1 2 {&quot;a&quot; [{&quot;b&quot; 3}]}]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/js-decode [&quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;])
```"></span></td><td><span data-qmd="```python
(lambda s : __import__(&quot;json&quot;).loads(s))(*[&quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;])
```"></span></td><td><span data-qmd="```clj
[1 2 {&quot;a&quot; [{&quot;b&quot; 3}]}]
```"></span></td></tr></tbody></table>
```

:::



### json-push

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/json-push &quot;[1,2,3]&quot; &quot;4&quot;)
```"></span></td><td><span data-qmd="```python
&quot;[1,2,3]&quot;[0:(len(&quot;[1,2,3]&quot;) - 1)] + &quot;,&quot; + &quot;4&quot; + &quot;]&quot;
```"></span></td><td><span data-qmd="```clj
&quot;[1,2,3,4]&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/json-push [&quot;[1,2,3]&quot; &quot;4&quot;])
```"></span></td><td><span data-qmd="```python
(lambda json,e : json[0:(len(json) - 1)] + &quot;,&quot; + e + &quot;]&quot;)(*[&quot;[1,2,3]&quot;,&quot;4&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;[1,2,3,4]&quot;
```"></span></td></tr></tbody></table>
```

:::



### json-push-first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/json-push-first &quot;[1,2,3]&quot; &quot;0&quot;)
```"></span></td><td><span data-qmd="```python
&quot;[&quot; + &quot;0&quot; + &quot;,&quot; + &quot;[1,2,3]&quot;[1:]
```"></span></td><td><span data-qmd="```clj
&quot;[0,1,2,3]&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/json-push-first [&quot;[1,2,3]&quot; &quot;0&quot;])
```"></span></td><td><span data-qmd="```python
(lambda json,e : &quot;[&quot; + e + &quot;,&quot; + json[1:])(*[&quot;[1,2,3]&quot;,&quot;0&quot;])
```"></span></td><td><span data-qmd="```clj
&quot;[0,1,2,3]&quot;
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Symbol


### sym-full

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sym-full &quot;hello&quot; &quot;world&quot;)
```"></span></td><td><span data-qmd="```python
k.sym_full(&quot;hello&quot;,&quot;world&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;hello/world&quot;
```"></span></td></tr></tbody></table>
```

:::



### sym-name

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sym-name &quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```python
k.sym_name(&quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;world&quot;
```"></span></td></tr></tbody></table>
```

:::



### sym-ns

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sym-ns &quot;hello/world&quot;)]
```"></span></td><td><span data-qmd="```python
k.sym_ns(&quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### sym-pair

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sym-pair &quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```python
k.sym_pair(&quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; &quot;world&quot;]
```"></span></td></tr></tbody></table>
```

:::



# Base Lib - Math


## Base Lib - Math Basic


### eq

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/eq 2 2) (k/eq 2 1)]
```"></span></td><td><span data-qmd="```python
[2 == 2,2 == 1]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/eq [1 1])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a == b)(*[1,1])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### neq

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/neq 2 2) (k/neq 2 1)]
```"></span></td><td><span data-qmd="```python
[2 != 2,2 != 1]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/neq [1 1])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a != b)(*[1,1])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### add

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/add 1 2)
```"></span></td><td><span data-qmd="```python
1 + 2
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/add [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a + b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr></tbody></table>
```

:::



### sub 

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sub 1 2)
```"></span></td><td><span data-qmd="```python
1 - 2
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sub [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a - b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### mul

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/mul 10 10)
```"></span></td><td><span data-qmd="```python
10 * 10
```"></span></td><td><span data-qmd="```clj
100
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/mul [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a * b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### div

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/div 10 2)
```"></span></td><td><span data-qmd="```python
10 / 2
```"></span></td><td><span data-qmd="```clj
5.0
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/div [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a / b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
0.5
```"></span></td></tr></tbody></table>
```

:::



### gt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/gt 2 2) (k/gt 2 1)]
```"></span></td><td><span data-qmd="```python
[2 &gt; 2,2 &gt; 1]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/gt [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a &gt; b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### lt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/lt 2 2) (k/lt 1 2)]
```"></span></td><td><span data-qmd="```python
[2 &lt; 2,1 &lt; 2]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/lt [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a &lt; b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### gte

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/gte 2 2) (k/gte 2 1)]
```"></span></td><td><span data-qmd="```python
[2 &gt;= 2,2 &gt;= 1]
```"></span></td><td><span data-qmd="```clj
[true true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/gte [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a &gt;= b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### lte

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/lte 2 2) (k/lte 1 2)]
```"></span></td><td><span data-qmd="```python
[2 &lt;= 2,1 &lt;= 2]
```"></span></td><td><span data-qmd="```clj
[true true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/lte [1 2])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a &lt;= b)(*[1,2])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### neg

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/neg 1) (k/neg 0) (k/neg -1)]
```"></span></td><td><span data-qmd="```python
[-(1),-(0),-(-1)]
```"></span></td><td><span data-qmd="```clj
[-1 0 1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/neg [1])
```"></span></td><td><span data-qmd="```python
(lambda x : -(x))(*[1])
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### inc

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/inc 1)
```"></span></td><td><span data-qmd="```python
1 + 1
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/inc [1])
```"></span></td><td><span data-qmd="```python
(lambda x : x + 1)(*[1])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### dec

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/dec 1)
```"></span></td><td><span data-qmd="```python
1 - 1
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/dec [1])
```"></span></td><td><span data-qmd="```python
(lambda x : x - 1)(*[1])
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### pow

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pow 2 3)
```"></span></td><td><span data-qmd="```python
2 ** 3
```"></span></td><td><span data-qmd="```clj
8
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/pow [5 6])
```"></span></td><td><span data-qmd="```python
(lambda base,n : base ** n)(*[5,6])
```"></span></td><td><span data-qmd="```clj
15625
```"></span></td></tr></tbody></table>
```

:::



### quot

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/quot 20 3)
```"></span></td><td><span data-qmd="```python
20 // 3
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/quot [50 6])
```"></span></td><td><span data-qmd="```python
(lambda base,n : base // n)(*[50,6])
```"></span></td><td><span data-qmd="```clj
8
```"></span></td></tr></tbody></table>
```

:::



### sqrt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sqrt 4) (k/sqrt 1)]
```"></span></td><td><span data-qmd="```python
[__import__(&quot;math&quot;).sqrt(4),__import__(&quot;math&quot;).sqrt(1)]
```"></span></td><td><span data-qmd="```clj
[2.0 1.0]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sqrt [16])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).sqrt(num))(*[16])
```"></span></td><td><span data-qmd="```clj
4.0
```"></span></td></tr></tbody></table>
```

:::



### exp

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/exp 3)
```"></span></td><td><span data-qmd="```python
__import__(&quot;math&quot;).exp(3)
```"></span></td><td><span data-qmd="```clj
20.085536923187668
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/exp [6])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).exp(num))(*[6])
```"></span></td><td><span data-qmd="```clj
403.4287934927351
```"></span></td></tr></tbody></table>
```

:::



### loge

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/loge 3)
```"></span></td><td><span data-qmd="```python
__import__(&quot;math&quot;).log(3)
```"></span></td><td><span data-qmd="```clj
1.0986122886681098
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/loge [6])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).log(num))(*[6])
```"></span></td><td><span data-qmd="```clj
1.791759469228055
```"></span></td></tr></tbody></table>
```

:::



### log10

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/log10 3)
```"></span></td><td><span data-qmd="```python
__import__(&quot;math&quot;).log10(3)
```"></span></td><td><span data-qmd="```clj
0.47712125471966244
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/log10 [6])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).log10(num))(*[6])
```"></span></td><td><span data-qmd="```clj
0.7781512503836436
```"></span></td></tr></tbody></table>
```

:::



### mod

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/mod 20 3)
```"></span></td><td><span data-qmd="```python
20 % 3
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/mod [50 6])
```"></span></td><td><span data-qmd="```python
(lambda num,denom : num % denom)(*[50,6])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### mod-pos

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(mod -11 10) (k/mod-pos -11 10)]
```"></span></td><td><span data-qmd="```python
[-11 % 10,k.mod_pos(-11,10)]
```"></span></td><td><span data-qmd="```clj
[9 9]
```"></span></td></tr></tbody></table>
```

:::



### mod-offset

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/mod-offset 20 280 360) (k/mod-offset 280 20 360) (k/mod-offset 280 -80 360) (k/mod-offset 20 -60 360) (k/mod-offset 60 30 360)]
```"></span></td><td><span data-qmd="```python
[
  k.mod_offset(20,280,360),
  k.mod_offset(280,20,360),
  k.mod_offset(280,-80,360),
  k.mod_offset(20,-60,360),
  k.mod_offset(60,30,360)
]
```"></span></td><td><span data-qmd="```clj
[-100 100 0 -80 -30]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Checks


### zero?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/zero? 1) (k/zero? 0)]
```"></span></td><td><span data-qmd="```python
[1 == 0,0 == 0]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/zero? [1])
```"></span></td><td><span data-qmd="```python
(lambda x : x == 0)(*[1])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### pos?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/pos? 1) (k/pos? 0)]
```"></span></td><td><span data-qmd="```python
[1 &gt; 0,0 &gt; 0]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/pos? [-1])
```"></span></td><td><span data-qmd="```python
(lambda x : x &gt; 0)(*[-1])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### neg?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/neg? -1) (k/neg? 0)]
```"></span></td><td><span data-qmd="```python
[-1 &lt; 0,0 &lt; 0]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/neg? [-1])
```"></span></td><td><span data-qmd="```python
(lambda x : x &lt; 0)(*[-1])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### even?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/even? 2) (k/even? 1)]
```"></span></td><td><span data-qmd="```python
[0 == (2 % 2),0 == (1 % 2)]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/even? [-1])
```"></span></td><td><span data-qmd="```python
(lambda x : 0 == (x % 2))(*[-1])
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### odd?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/odd? 2) (k/odd? 1)]
```"></span></td><td><span data-qmd="```python
[not (0 == (2 % 2)),not (0 == (1 % 2))]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/odd? [-1])
```"></span></td><td><span data-qmd="```python
(lambda x : not (0 == (x % 2)))(*[-1])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Util


### abs

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/abs -1) (k/abs 1)]
```"></span></td><td><span data-qmd="```python
[abs(-1),abs(1)]
```"></span></td><td><span data-qmd="```clj
[1 1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/abs [-1])
```"></span></td><td><span data-qmd="```python
(lambda num : abs(num))(*[-1])
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### max

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/max 1 2 3 2)
```"></span></td><td><span data-qmd="```python
max(1,2,3,2)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/max [1 2 3 2])
```"></span></td><td><span data-qmd="```python
max(*[1,2,3,2])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### min

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/min 1 2 3 2)
```"></span></td><td><span data-qmd="```python
min(1,2,3,2)
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/min [1 2 3 2])
```"></span></td><td><span data-qmd="```python
max(*[1,2,3,2])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### ceil

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/ceil -1.1) (k/ceil 1.1)]
```"></span></td><td><span data-qmd="```python
[__import__(&quot;math&quot;).ceil(-1.1),__import__(&quot;math&quot;).ceil(1.1)]
```"></span></td><td><span data-qmd="```clj
[-1 2]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/ceil [-1.1])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).ceil(num))(*[-1.1])
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### floor

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/floor -1.1) (k/floor 1.1)]
```"></span></td><td><span data-qmd="```python
[__import__(&quot;math&quot;).floor(-1.1),__import__(&quot;math&quot;).floor(1.1)]
```"></span></td><td><span data-qmd="```clj
[-2 1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/floor [-1.1])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).floor(num))(*[-1.1])
```"></span></td><td><span data-qmd="```clj
-2
```"></span></td></tr></tbody></table>
```

:::



### gcd

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/gcd 10 6)
```"></span></td><td><span data-qmd="```python
k.gcd(10,6)
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### lcm

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/lcm 10 6)
```"></span></td><td><span data-qmd="```python
k.lcm(10,6)
```"></span></td><td><span data-qmd="```clj
30.0
```"></span></td></tr></tbody></table>
```

:::



### mix

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/mix 100 20 0.1 nil)
```"></span></td><td><span data-qmd="```python
k.mix(100,20,0.1,None)
```"></span></td><td><span data-qmd="```clj
92.0
```"></span></td></tr></tbody></table>
```

:::



### sign

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sign -10) (k/sign 10)]
```"></span></td><td><span data-qmd="```python
[k.sign(-10),k.sign(10)]
```"></span></td><td><span data-qmd="```clj
[-1 1]
```"></span></td></tr></tbody></table>
```

:::



### round

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/round 0.9) (k/round 1.1) (k/round 1.49) (k/round 1.51)]
```"></span></td><td><span data-qmd="```python
[k.round(0.9),k.round(1.1),k.round(1.49),k.round(1.51)]
```"></span></td><td><span data-qmd="```clj
[1 1 1 2]
```"></span></td></tr></tbody></table>
```

:::



### clamp

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/clamp 0 5 6) (k/clamp 0 5 -1) (k/clamp 0 5 4)]
```"></span></td><td><span data-qmd="```python
[k.clamp(0,5,6),k.clamp(0,5,-1),k.clamp(0,5,4)]
```"></span></td><td><span data-qmd="```clj
[5 0 4]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Bitwise


### bit-and

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-and 7 4)
```"></span></td><td><span data-qmd="```python
7 &amp; 4
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-and [7 4])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a &amp; b)(*[7,4])
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr></tbody></table>
```

:::



### bit-or

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-or 3 4)
```"></span></td><td><span data-qmd="```python
3 | 4
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-or [3 4])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a | b)(*[3,4])
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr></tbody></table>
```

:::



### bit-xor

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-xor 3 5)
```"></span></td><td><span data-qmd="```python
3 ^ 5
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-xor [3 5])
```"></span></td><td><span data-qmd="```python
(lambda a,b : a ^ b)(*[3,5])
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr></tbody></table>
```

:::



### bit-lshift

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-lshift 7 1)
```"></span></td><td><span data-qmd="```python
7 &lt;&lt; 1
```"></span></td><td><span data-qmd="```clj
14
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-lshift [7 1])
```"></span></td><td><span data-qmd="```python
(lambda x,n : x &lt;&lt; n)(*[7,1])
```"></span></td><td><span data-qmd="```clj
14
```"></span></td></tr></tbody></table>
```

:::



### bit-rshift

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-rshift 7 1)
```"></span></td><td><span data-qmd="```python
7 &gt;&gt; 1
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-rshift [7 1])
```"></span></td><td><span data-qmd="```python
(lambda x,n : x &gt;&gt; n)(*[7,1])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### bit-count

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/bit-count 16) (k/bit-count 10) (k/bit-count 3) (k/bit-count 7)]
```"></span></td><td><span data-qmd="```python
[k.bit_count(16),k.bit_count(10),k.bit_count(3),k.bit_count(7)]
```"></span></td><td><span data-qmd="```clj
[1 2 2 3]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Trigonometry


### sin

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sin (/ 3.14159 4)) (k/sin (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```python
[
  __import__(&quot;math&quot;).sin(3.14159 / 4),
  __import__(&quot;math&quot;).sin(3.14159 / 6)
]
```"></span></td><td><span data-qmd="```clj
[0.7071063120935576 0.4999996169872557]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sin [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).sin(num))(*[3.14159 / 4])
```"></span></td><td><span data-qmd="```clj
0.7071063120935576
```"></span></td></tr></tbody></table>
```

:::



### cos

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/cos (/ 3.14159 4)) (k/cos (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```python
[
  __import__(&quot;math&quot;).cos(3.14159 / 4),
  __import__(&quot;math&quot;).cos(3.14159 / 6)
]
```"></span></td><td><span data-qmd="```clj
[0.7071072502792263 0.8660256249168368]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/cos [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).cos(num))(*[3.14159 / 4])
```"></span></td><td><span data-qmd="```clj
0.7071072502792263
```"></span></td></tr></tbody></table>
```

:::



### tan

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/tan (/ 3.14159 4)) (k/tan (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```python
[
  __import__(&quot;math&quot;).tan(3.14159 / 4),
  __import__(&quot;math&quot;).tan(3.14159 / 6)
]
```"></span></td><td><span data-qmd="```clj
[0.9999986732059835 0.5773496795031555]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/tan [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).tan(num))(*[3.14159 / 4])
```"></span></td><td><span data-qmd="```clj
0.9999986732059835
```"></span></td></tr></tbody></table>
```

:::



### asin

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/asin 0.5) (k/asin 0.8)]
```"></span></td><td><span data-qmd="```python
[__import__(&quot;math&quot;).asin(0.5),__import__(&quot;math&quot;).asin(0.8)]
```"></span></td><td><span data-qmd="```clj
[0.5235987755982988 0.9272952180016123]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/asin [0.5])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).asin(num))(*[0.5])
```"></span></td><td><span data-qmd="```clj
0.5235987755982988
```"></span></td></tr></tbody></table>
```

:::



### acos

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/acos 0.5) (k/acos 0.8)]
```"></span></td><td><span data-qmd="```python
[__import__(&quot;math&quot;).acos(0.5),__import__(&quot;math&quot;).acos(0.8)]
```"></span></td><td><span data-qmd="```clj
[1.0471975511965976 0.6435011087932843]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/acos [0.5])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).acos(num))(*[0.5])
```"></span></td><td><span data-qmd="```clj
1.0471975511965976
```"></span></td></tr></tbody></table>
```

:::



### atan

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/atan 0.5) (k/atan 0.8)]
```"></span></td><td><span data-qmd="```python
[__import__(&quot;math&quot;).atan(0.5),__import__(&quot;math&quot;).atan(0.8)]
```"></span></td><td><span data-qmd="```clj
[0.46364760900080615 0.6747409422235527]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/atan [0.5])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).atan(num))(*[0.5])
```"></span></td><td><span data-qmd="```clj
0.46364760900080615
```"></span></td></tr></tbody></table>
```

:::



### sinh

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sinh (/ 3.14159 4)) (k/sinh (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```python
[
  __import__(&quot;math&quot;).sinh(3.14159 / 4),
  __import__(&quot;math&quot;).sinh(3.14159 / 6)
]
```"></span></td><td><span data-qmd="```clj
[0.8686700827439109 0.5478529696006316]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sinh [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).sinh(num))(*[3.14159 / 4])
```"></span></td><td><span data-qmd="```clj
0.8686700827439109
```"></span></td></tr></tbody></table>
```

:::



### cosh

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/cosh (/ 3.14159 4)) (k/cosh (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```python
[
  __import__(&quot;math&quot;).cosh(3.14159 / 4),
  __import__(&quot;math&quot;).cosh(3.14159 / 6)
]
```"></span></td><td><span data-qmd="```clj
[1.324608512978198 1.1402380787801425]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/cosh [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).cosh(num))(*[3.14159 / 4])
```"></span></td><td><span data-qmd="```clj
1.324608512978198
```"></span></td></tr></tbody></table>
```

:::



### tanh

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/tanh (/ 3.14159 4)) (k/tanh (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```python
[
  __import__(&quot;math&quot;).tanh(3.14159 / 4),
  __import__(&quot;math&quot;).tanh(3.14159 / 6)
]
```"></span></td><td><span data-qmd="```clj
[0.6557938245397706 0.48047243799009015]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/tanh [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```python
(lambda num : __import__(&quot;math&quot;).tanh(num))(*[3.14159 / 4])
```"></span></td><td><span data-qmd="```clj
0.6557938245397706
```"></span></td></tr></tbody></table>
```

:::



::: {.printedClojure}
```clojure
{:code
 [nil
  {:lang :python,
   :redirect nil,
   :context :lang/python,
   :runtime :default,
   :module stdlang-book.walkthrough-python,
   :module/internal
   {xt.lang.base-lib k,
    xt.lang.base-iter it,
    stdlang-book.walkthrough-python -},
   :module/primary #{}}],
 :live
 [nil
  {:id "t81atpus2fy0",
   :layout :full,
   :bench
   {:type :bench/basic,
    :lang :python,
    :program nil,
    :port 53536,
    :host "127.0.0.1",
    :process
    #object[java.lang.ProcessImpl 0x3908535b "Process[pid=19067, exitValue=\"not exited\"]"],
    :thread
    #object[java.util.concurrent.CompletableFuture 0x37e8ae16 "java.util.concurrent.CompletableFuture@37e8ae16[Not completed]"],
    :root-dir
    "/var/folders/1t/81x6sszx3tl2q7kz2g1681c80000gn/T/4481597093486059692"},
   :process
   {:bootstrap #'rt.basic.impl.process-python/default-basic-client,
    :main {},
    :emit
    {:body
     {:transform
      #'rt.basic.impl.process-python/default-body-transform}},
    :json :full,
    :encode :json,
    :timeout 2000},
   :lifecycle
   {:bootstrap #'rt.basic.impl.process-python/default-basic-client,
    :main {},
    :emit
    {:body
     {:transform
      #'rt.basic.impl.process-python/default-body-transform}},
    :json :full,
    :encode :json,
    :timeout 2000},
   :module stdlang-book.walkthrough-python,
   :lang :python,
   :module/internal
   {xt.lang.base-lib k,
    xt.lang.base-iter it,
    stdlang-book.walkthrough-python -},
   :runtime :basic,
   :context :lang/python,
   :module/primary #{},
   :tag :basic}]}

```
:::



# Base Lib - Collection


## Base Lib - Sequence


### first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/first [1 2 3])
```"></span></td><td><span data-qmd="```python
([1,2,3])[0]
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/first [[1 2 3]]])
```"></span></td><td><span data-qmd="```python
(lambda arr : arr[0])(*[[1,2,3]])
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### second

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/second [1 2 3])
```"></span></td><td><span data-qmd="```python
([1,2,3])[1]
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/second [[1 2 3]]])
```"></span></td><td><span data-qmd="```python
(lambda arr : arr[1])(*[[1,2,3]])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### nth

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/nth [1 2 3] 2)
```"></span></td><td><span data-qmd="```python
([1,2,3])[2]
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/nth [[1 2 3] 2]])
```"></span></td><td><span data-qmd="```python
(lambda arr,i : arr[i])(*[[1,2,3],2])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### last

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/last [1 2 3])
```"></span></td><td><span data-qmd="```python
([1,2,3])[len([1,2,3]) + -1]
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/last [[1 2 3]]])
```"></span></td><td><span data-qmd="```python
(lambda arr : arr[len(arr) + -1])(*[[1,2,3]])
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### second-last

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/second-last [1 2 3])
```"></span></td><td><span data-qmd="```python
([1,2,3])[len([1,2,3]) + -2]
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/second-last [[1 2 3]]])
```"></span></td><td><span data-qmd="```python
(lambda arr : arr[len(arr) + -2])(*[[1,2,3]])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### get-idx

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/get-idx [1 2 3] 1) (k/get-idx [1 2 3] 2)]
```"></span></td><td><span data-qmd="```python
[([1,2,3])[1],([1,2,3])[2]]
```"></span></td><td><span data-qmd="```clj
[2 3]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/get-idx [[1 2 3] 1 nil])
```"></span></td><td><span data-qmd="```python
(lambda arr,i,d : arr[i] or d)(*[[1,2,3],1,None])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### set-idx

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := [1 2 3 4 5]) (k/set-idx out 2 5) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3,4,5]
out[2] = 5
out
```"></span></td><td><span data-qmd="```clj
[1 2 5 4 5]
```"></span></td></tr></tbody></table>
```

:::



### is-empty?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/is-empty? nil) (k/is-empty? &quot;&quot;) (k/is-empty? &quot;123&quot;) (k/is-empty? []) (k/is-empty? [1 2 3]) (k/is-empty? {}) (k/is-empty? {:a 1, :b 2})]
```"></span></td><td><span data-qmd="```python
[
  k.is_emptyp(None),
  k.is_emptyp(&quot;&quot;),
  k.is_emptyp(&quot;123&quot;),
  k.is_emptyp([]),
  k.is_emptyp([1,2,3]),
  k.is_emptyp({}),
  k.is_emptyp({&quot;a&quot;:1,&quot;b&quot;:2})
]
```"></span></td><td><span data-qmd="```clj
[true true false true false true false]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Keys


### has-key?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/has-key? {:a 1} &quot;a&quot;) (k/has-key? {:a 1} &quot;b&quot;)]
```"></span></td><td><span data-qmd="```python
[{&quot;a&quot;:1}.get(&quot;a&quot;) != None,{&quot;a&quot;:1}.get(&quot;b&quot;) != None]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/has-key? [{:a 1} &quot;a&quot;])
```"></span></td><td><span data-qmd="```python
(lambda obj,k : obj.get(k) != None)(*[{&quot;a&quot;:1},&quot;a&quot;])
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### del-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1, :b 2}) (k/del-key out &quot;a&quot;) out)
```"></span></td><td><span data-qmd="```python
out = {&quot;a&quot;:1,&quot;b&quot;:2}
del out[&quot;a&quot;]
out
```"></span></td><td><span data-qmd="```clj
{&quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### get-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/get-key {:a 1} &quot;a&quot;) (k/get-key {:a 1} &quot;b&quot;)]
```"></span></td><td><span data-qmd="```python
[{&quot;a&quot;:1}.get(&quot;a&quot;),{&quot;a&quot;:1}.get(&quot;b&quot;)]
```"></span></td><td><span data-qmd="```clj
[1 nil]
```"></span></td></tr></tbody></table>
```

:::



### get-path

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody></tbody></table>
```

:::



### set-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1, :b 2}) (k/set-key out &quot;a&quot; 5) out)
```"></span></td><td><span data-qmd="```python
out = {&quot;a&quot;:1,&quot;b&quot;:2}
out[&quot;a&quot;] = 5
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 5, &quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### copy-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {}) (k/copy-key out {:a 1} &quot;a&quot;) out)
```"></span></td><td><span data-qmd="```python
out = {}
out[&quot;a&quot;] = ({&quot;a&quot;:1})[&quot;a&quot;]
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1}
```"></span></td></tr><tr><td><span data-qmd="```clj
(do (var out := {}) (k/copy-key out {:a 1} [&quot;c&quot; &quot;a&quot;]) out)
```"></span></td><td><span data-qmd="```python
out = {}
out[&quot;c&quot;] = ({&quot;a&quot;:1})[&quot;a&quot;]
out
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 1}
```"></span></td></tr></tbody></table>
```

:::



### swap-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1, :b 2}) (k/swap-key out &quot;a&quot; k/inc) out)
```"></span></td><td><span data-qmd="```python
out = {&quot;a&quot;:1,&quot;b&quot;:2}
out[&quot;a&quot;] = (out.get(&quot;a&quot;) + 1)
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 2, &quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Array


### x:arr-push

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-push out 4) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3]
out.append(4)
out
```"></span></td><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-pop

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-pop out) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3]
out.pop()
out
```"></span></td><td><span data-qmd="```clj
[1 2]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-push-first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-push-first out 0) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3]
out.insert(0,0)
out
```"></span></td><td><span data-qmd="```clj
[0 1 2 3]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-pop-first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-pop-first out) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3]
out.pop(0)
out
```"></span></td><td><span data-qmd="```clj
[2 3]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-insert

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-insert out (x:offset 2) &quot;a&quot;) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3]
out.insert(2,&quot;a&quot;)
out
```"></span></td><td><span data-qmd="```clj
[1 2 &quot;a&quot; 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-lookup

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-lookup [&quot;a&quot; &quot;b&quot; &quot;c&quot;])
```"></span></td><td><span data-qmd="```python
k.arr_lookup([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; true, &quot;b&quot; true, &quot;c&quot; true}
```"></span></td></tr></tbody></table>
```

:::



### arr-every

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-every [1 2 3] k/odd?) (k/arr-every [1 3] k/odd?)]
```"></span></td><td><span data-qmd="```python
[
  k.arr_every([1,2,3],lambda x : not (0 == (x % 2))),
  k.arr_every([1,3],lambda x : not (0 == (x % 2)))
]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr></tbody></table>
```

:::



### arr-some

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-some [1 2 3] k/even?) (k/arr-some [1 3] k/even?)]
```"></span></td><td><span data-qmd="```python
[
  k.arr_some([1,2,3],lambda x : 0 == (x % 2)),
  k.arr_some([1,3],lambda x : 0 == (x % 2))
]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr></tbody></table>
```

:::



### arr-each

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out []) (k/arr-each [1 2 3 4 5] (fn [e] (x:arr-push out (+ 1 e)))) out)
```"></span></td><td><span data-qmd="```python
out = []
k.arr_each([1,2,3,4,5],lambda e : out.append(1 + e))
out
```"></span></td><td><span data-qmd="```clj
[2 3 4 5 6]
```"></span></td></tr></tbody></table>
```

:::



### arr-omit

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-omit [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] 2)
```"></span></td><td><span data-qmd="```python
k.arr_omit([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;],2)
```"></span></td><td><span data-qmd="```clj
[&quot;a&quot; &quot;b&quot; &quot;d&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-reverse

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-reverse [1 2 3 4 5])
```"></span></td><td><span data-qmd="```python
k.arr_reverse([1,2,3,4,5])
```"></span></td><td><span data-qmd="```clj
[5 4 3 2 1]
```"></span></td></tr></tbody></table>
```

:::



### arr-find

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-find [1 2 3 4 5] (fn:&gt; [x] (== x 3)))
```"></span></td><td><span data-qmd="```python
k.arr_find([1,2,3,4,5],lambda x : x == 3)
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### arr-zip

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-zip [&quot;a&quot; &quot;b&quot; &quot;c&quot;] [1 2 3])
```"></span></td><td><span data-qmd="```python
k.arr_zip([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],[1,2,3])
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### arr-map

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-map [1 2 3 4 5] k/inc)
```"></span></td><td><span data-qmd="```python
k.arr_map([1,2,3,4,5],lambda x : x + 1)
```"></span></td><td><span data-qmd="```clj
[2 3 4 5 6]
```"></span></td></tr></tbody></table>
```

:::



### arr-clone

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-clone [1 2 3])
```"></span></td><td><span data-qmd="```python
k.arr_clone([1,2,3])
```"></span></td><td><span data-qmd="```clj
[1 2 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-append

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/arr-append out [4 5]) out)
```"></span></td><td><span data-qmd="```python
out = [1,2,3]
k.arr_append(out,[4,5])
out
```"></span></td><td><span data-qmd="```clj
[1 2 3 4 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-slice

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-slice [1 2 3 4 5] 1 3)
```"></span></td><td><span data-qmd="```python
k.arr_slice([1,2,3,4,5],1,3)
```"></span></td><td><span data-qmd="```clj
[2 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-rslice

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-rslice [1 2 3 4 5] 1 3)
```"></span></td><td><span data-qmd="```python
k.arr_rslice([1,2,3,4,5],1,3)
```"></span></td><td><span data-qmd="```clj
[3 2]
```"></span></td></tr></tbody></table>
```

:::



### arr-tail

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-tail [1 2 3 4 5] 3)
```"></span></td><td><span data-qmd="```python
k.arr_tail([1,2,3,4,5],3)
```"></span></td><td><span data-qmd="```clj
[5 4 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-mapcat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-mapcat [1 2 3] (fn:&gt; [k] [k k k]))
```"></span></td><td><span data-qmd="```python
k.arr_mapcat([1,2,3],lambda k : [k,k,k])
```"></span></td><td><span data-qmd="```clj
[1 1 1 2 2 2 3 3 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-partition

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-partition [1 2 3 4 5 6 7 8 9 10] 3)
```"></span></td><td><span data-qmd="```python
k.arr_partition([1,2,3,4,5,6,7,8,9,10],3)
```"></span></td><td><span data-qmd="```clj
[[1 2 3] [4 5 6] [7 8 9] [10]]
```"></span></td></tr></tbody></table>
```

:::



### arr-filter

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-filter [1 2 3 4 5] k/odd?)
```"></span></td><td><span data-qmd="```python
k.arr_filter([1,2,3,4,5],lambda x : not (0 == (x % 2)))
```"></span></td><td><span data-qmd="```clj
[1 3 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-keep

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-keep [1 2 3 4 5] (fn:&gt; [x] (:? (k/odd? x) x)))
```"></span></td><td><span data-qmd="```python
k.arr_keep([1,2,3,4,5],lambda x : (not (0 == (x % 2))) and x or None)
```"></span></td><td><span data-qmd="```clj
[1 3 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-keepf

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-keepf [1 2 3 4 5] k/odd? k/identity)
```"></span></td><td><span data-qmd="```python
k.arr_keepf([1,2,3,4,5],lambda x : not (0 == (x % 2)),k.identity)
```"></span></td><td><span data-qmd="```clj
[1 3 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-juxt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-juxt [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3]] k/first k/second)
```"></span></td><td><span data-qmd="```python
k.arr_juxt(
  [[&quot;a&quot;,1],[&quot;b&quot;,2],[&quot;c&quot;,3]],
  lambda arr : arr[0],
  lambda arr : arr[1]
)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### arr-foldl

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-foldl [1 2 3 4 5] k/add 0)
```"></span></td><td><span data-qmd="```python
k.arr_foldl([1,2,3,4,5],lambda a,b : a + b,0)
```"></span></td><td><span data-qmd="```clj
15
```"></span></td></tr></tbody></table>
```

:::



### arr-foldr

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-foldr [1 2 3 4 5] k/step-push [])
```"></span></td><td><span data-qmd="```python
k.arr_foldr([1,2,3,4,5],k.step_push,[])
```"></span></td><td><span data-qmd="```clj
[5 4 3 2 1]
```"></span></td></tr></tbody></table>
```

:::



### arr-pipel

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-pipel [(fn:&gt; [x] (* x 10)) (fn:&gt; [x] (+ x 10))] 1)
```"></span></td><td><span data-qmd="```python
k.arr_pipel([lambda x : x * 10,lambda x : x + 10],1)
```"></span></td><td><span data-qmd="```clj
20
```"></span></td></tr></tbody></table>
```

:::



### arr-piper

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-piper [(fn:&gt; [x] (* x 10)) (fn:&gt; [x] (+ x 10))] 1)
```"></span></td><td><span data-qmd="```python
k.arr_piper([lambda x : x * 10,lambda x : x + 10],1)
```"></span></td><td><span data-qmd="```clj
110
```"></span></td></tr></tbody></table>
```

:::



### arr-group-by

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-group-by [[&quot;a&quot; 1] [&quot;a&quot; 2] [&quot;b&quot; 3] [&quot;b&quot; 4]] k/first k/second)
```"></span></td><td><span data-qmd="```python
k.arr_group_by(
  [[&quot;a&quot;,1],[&quot;a&quot;,2],[&quot;b&quot;,3],[&quot;b&quot;,4]],
  lambda arr : arr[0],
  lambda arr : arr[1]
)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; [1 2], &quot;b&quot; [3 4]}
```"></span></td></tr></tbody></table>
```

:::



### arr-range

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-range 10) (k/arr-range [10]) (k/arr-range [2 8]) (k/arr-range [2 9 2])]
```"></span></td><td><span data-qmd="```python
[
  k.arr_range(10),
  k.arr_range([10]),
  k.arr_range([2,8]),
  k.arr_range([2,9,2])
]
```"></span></td><td><span data-qmd="```clj
[[0 1 2 3 4 5 6 7 8 9] [0 1 2 3 4 5 6 7 8 9] [2 3 4 5 6 7] [2 4 6 8]]
```"></span></td></tr></tbody></table>
```

:::



### arr-intersection

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-intersection [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] [&quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;])
```"></span></td><td><span data-qmd="```python
k.arr_intersection([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;],[&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;])
```"></span></td><td><span data-qmd="```clj
[&quot;c&quot; &quot;d&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-difference

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-difference [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] [&quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;])
```"></span></td><td><span data-qmd="```python
k.arr_difference([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;],[&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;])
```"></span></td><td><span data-qmd="```clj
[&quot;e&quot; &quot;f&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-union 

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-union [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] [&quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;])
```"></span></td><td><span data-qmd="```python
k.arr_union([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;],[&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;])
```"></span></td><td><span data-qmd="```clj
[&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-sort

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-sort [3 4 1 2] k/identity (fn:&gt; [a b] (&lt; a b))) (k/arr-sort [3 4 1 2] k/identity (fn:&gt; [a b] (&lt; b a))) (k/arr-sort [[&quot;c&quot; 3] [&quot;d&quot; 4] [&quot;a&quot; 1] [&quot;b&quot; 2]] k/first (fn:&gt; [a b] (x:arr-str-comp a b))) (k/arr-sort [[&quot;c&quot; 3] [&quot;d&quot; 4] [&quot;a&quot; 1] [&quot;b&quot; 2]] k/second (fn:&gt; [a b] (&lt; a b)))]
```"></span></td><td><span data-qmd="```python
[
  k.arr_sort([3,4,1,2],k.identity,lambda a,b : a &lt; b),
  k.arr_sort([3,4,1,2],k.identity,lambda a,b : b &lt; a),
  k.arr_sort(
  [[&quot;c&quot;,3],[&quot;d&quot;,4],[&quot;a&quot;,1],[&quot;b&quot;,2]],
  lambda arr : arr[0],
  lambda a,b : a &lt; b
),
  k.arr_sort(
  [[&quot;c&quot;,3],[&quot;d&quot;,4],[&quot;a&quot;,1],[&quot;b&quot;,2]],
  lambda arr : arr[1],
  lambda a,b : a &lt; b
)
]
```"></span></td><td><span data-qmd="```clj
[[1 2 3 4] [4 3 2 1] [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3] [&quot;d&quot; 4]] [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3] [&quot;d&quot; 4]]]
```"></span></td></tr></tbody></table>
```

:::



### arr-sorted-merge

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-sorted-merge [1 2 3] [4 5 6] k/lt) (k/arr-sorted-merge [1 2 4] [3 5 6] k/lt) (k/arr-sorted-merge (k/arr-reverse [1 2 4]) (k/arr-reverse [3 5 6]) k/gt)]
```"></span></td><td><span data-qmd="```python
[
  k.arr_sorted_merge([1,2,3],[4,5,6],lambda a,b : a &lt; b),
  k.arr_sorted_merge([1,2,4],[3,5,6],lambda a,b : a &lt; b),
  k.arr_sorted_merge(
  k.arr_reverse([1,2,4]),
  k.arr_reverse([3,5,6]),
  lambda a,b : a &gt; b
)
]
```"></span></td><td><span data-qmd="```clj
[[1 2 3 4 5 6] [1 2 3 4 5 6] [6 5 4 3 2 1]]
```"></span></td></tr></tbody></table>
```

:::



### arr-shuffle

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-shuffle [1 2 3 4 5])
```"></span></td><td><span data-qmd="```python
k.arr_shuffle([1,2,3,4,5])
```"></span></td><td><span data-qmd="```clj
[4 5 3 1 2]
```"></span></td></tr></tbody></table>
```

:::



### arr-pushl

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-pushl [1 2 3 4] 5 100) (k/arr-pushl [1 2 3 4] 5 4)]
```"></span></td><td><span data-qmd="```python
[k.arr_pushl([1,2,3,4],5,100),k.arr_pushl([1,2,3,4],5,4)]
```"></span></td><td><span data-qmd="```clj
[[1 2 3 4 5] [2 3 4 5]]
```"></span></td></tr></tbody></table>
```

:::



### arr-pushr

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-pushr [1 2 3 4] 5 100) (k/arr-pushr [1 2 3 4] 5 4)]
```"></span></td><td><span data-qmd="```python
[k.arr_pushr([1,2,3,4],5,100),k.arr_pushr([1,2,3,4],5,4)]
```"></span></td><td><span data-qmd="```clj
[[5 1 2 3 4] [5 1 2 3]]
```"></span></td></tr></tbody></table>
```

:::



### arr-join

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-join [&quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot;] &quot; &quot;)
```"></span></td><td><span data-qmd="```python
k.arr_join([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;],&quot; &quot;)
```"></span></td><td><span data-qmd="```clj
&quot;1 2 3 4&quot;
```"></span></td></tr></tbody></table>
```

:::



### arr-interpose

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-interpose [&quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot;] &quot;XX&quot;)
```"></span></td><td><span data-qmd="```python
k.arr_interpose([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;],&quot;XX&quot;)
```"></span></td><td><span data-qmd="```clj
[&quot;1&quot; &quot;XX&quot; &quot;2&quot; &quot;XX&quot; &quot;3&quot; &quot;XX&quot; &quot;4&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-repeat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-repeat &quot;1&quot; 4)]
```"></span></td><td><span data-qmd="```python
[k.arr_repeat(&quot;1&quot;,4)]
```"></span></td><td><span data-qmd="```clj
[[&quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot;]]
```"></span></td></tr></tbody></table>
```

:::



### arr-random

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-random [1 2 3 4])
```"></span></td><td><span data-qmd="```python
k.arr_random([1,2,3,4])
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### arr-normalise

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-normalise [1 2 3 4])
```"></span></td><td><span data-qmd="```python
k.arr_normalise([1,2,3,4])
```"></span></td><td><span data-qmd="```clj
[0.1 0.2 0.3 0.4]
```"></span></td></tr></tbody></table>
```

:::



### arr-sample

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-sample [&quot;left&quot; &quot;right&quot; &quot;up&quot; &quot;down&quot;] [0.1 0.2 0.3 0.4])
```"></span></td><td><span data-qmd="```python
k.arr_sample([&quot;left&quot;,&quot;right&quot;,&quot;up&quot;,&quot;down&quot;],[0.1,0.2,0.3,0.4])
```"></span></td><td><span data-qmd="```clj
&quot;down&quot;
```"></span></td></tr></tbody></table>
```

:::



### arrayify

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arrayify 1) (k/arrayify [1])]
```"></span></td><td><span data-qmd="```python
[k.arrayify(1),k.arrayify([1])]
```"></span></td><td><span data-qmd="```clj
[[1] [1]]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Object


### obj-empty?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-empty? {}) (k/obj-empty? {:a 1})]
```"></span></td><td><span data-qmd="```python
[k.obj_emptyp({}),k.obj_emptyp({&quot;a&quot;:1})]
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr></tbody></table>
```

:::



### obj-not-empty?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-not-empty? {}) (k/obj-not-empty? {:a 1})]
```"></span></td><td><span data-qmd="```python
[k.obj_not_emptyp({}),k.obj_not_emptyp({&quot;a&quot;:1})]
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr></tbody></table>
```

:::



### obj-first-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-first-key {:a 1})
```"></span></td><td><span data-qmd="```python
k.obj_first_key({&quot;a&quot;:1})
```"></span></td><td><span data-qmd="```clj
&quot;a&quot;
```"></span></td></tr></tbody></table>
```

:::



### obj-first-val

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-first-val {:a 1})
```"></span></td><td><span data-qmd="```python
k.obj_first_val({&quot;a&quot;:1})
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### obj-keys

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keys {:a 1, :b 2})
```"></span></td><td><span data-qmd="```python
k.obj_keys({&quot;a&quot;:1,&quot;b&quot;:2})
```"></span></td><td><span data-qmd="```clj
[&quot;a&quot; &quot;b&quot;]
```"></span></td></tr></tbody></table>
```

:::



### obj-vals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-vals {:a 1, :b 2})
```"></span></td><td><span data-qmd="```python
k.obj_vals({&quot;a&quot;:1,&quot;b&quot;:2})
```"></span></td><td><span data-qmd="```clj
[1 2]
```"></span></td></tr></tbody></table>
```

:::



### obj-pairs

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-pairs {:a 1, :b 2, :c 2})
```"></span></td><td><span data-qmd="```python
k.obj_pairs({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:2})
```"></span></td><td><span data-qmd="```clj
[[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 2]]
```"></span></td></tr></tbody></table>
```

:::



### obj-clone

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-clone {:a 1, :b 2, :c 3})
```"></span></td><td><span data-qmd="```python
k.obj_clone({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-assign

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1}) (k/obj-assign out {:b 2, :c 3}) out)
```"></span></td><td><span data-qmd="```python
out = {&quot;a&quot;:1}
k.obj_assign(out,{&quot;b&quot;:2,&quot;c&quot;:3})
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-assign-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-assign-nested {:a 1} {:b 2}) (k/obj-assign-nested {:a {:b {:c 1}}} {:a {:b {:d 1}}})]
```"></span></td><td><span data-qmd="```python
[
  k.obj_assign_nested({&quot;a&quot;:1},{&quot;b&quot;:2}),
  k.obj_assign_nested({&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1}}},{&quot;a&quot;:{&quot;b&quot;:{&quot;d&quot;:1}}})
]
```"></span></td><td><span data-qmd="```clj
[{&quot;a&quot; 1, &quot;b&quot; 2} {&quot;a&quot; {&quot;b&quot; {&quot;d&quot; 1, &quot;c&quot; 1}}}]
```"></span></td></tr></tbody></table>
```

:::



### obj-assign-with

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-assign-with {:a {:b true}} {:a {:c true}} k/obj-assign)
```"></span></td><td><span data-qmd="```python
k.obj_assign_with({&quot;a&quot;:{&quot;b&quot;:True}},{&quot;a&quot;:{&quot;c&quot;:True}},k.obj_assign)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; true, &quot;c&quot; true}}
```"></span></td></tr></tbody></table>
```

:::



### obj-from-pairs

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-from-pairs [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3]])
```"></span></td><td><span data-qmd="```python
k.obj_from_pairs([[&quot;a&quot;,1],[&quot;b&quot;,2],[&quot;c&quot;,3]])
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-del

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-del {:a 1, :b 2, :c 3} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```python
k.obj_del({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},[&quot;a&quot;,&quot;b&quot;])
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-del-all

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-del-all {:a 1, :b 2, :c 3})
```"></span></td><td><span data-qmd="```python
k.obj_del_all({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3})
```"></span></td><td><span data-qmd="```clj
{}
```"></span></td></tr></tbody></table>
```

:::



### obj-pick

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-pick {:a 1, :b 2, :c 3} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```python
k.obj_pick({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},[&quot;a&quot;,&quot;b&quot;])
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### obj-omit

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-omit {:a 1, :b 2, :c 3} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```python
k.obj_omit({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},[&quot;a&quot;,&quot;b&quot;])
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-transpose

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-transpose {:a &quot;x&quot;, :b &quot;y&quot;, :c &quot;z&quot;})
```"></span></td><td><span data-qmd="```python
k.obj_transpose({&quot;a&quot;:&quot;x&quot;,&quot;b&quot;:&quot;y&quot;,&quot;c&quot;:&quot;z&quot;})
```"></span></td><td><span data-qmd="```clj
{&quot;z&quot; &quot;c&quot;, &quot;x&quot; &quot;a&quot;, &quot;y&quot; &quot;b&quot;}
```"></span></td></tr></tbody></table>
```

:::



### obj-nest

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-nest [&quot;a&quot; &quot;b&quot;] 1)
```"></span></td><td><span data-qmd="```python
k.obj_nest([&quot;a&quot;,&quot;b&quot;],1)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; 1}}
```"></span></td></tr></tbody></table>
```

:::



### obj-map

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-map {:a 1, :b 2, :c 3} k/inc)
```"></span></td><td><span data-qmd="```python
k.obj_map({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},lambda x : x + 1)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 2, &quot;b&quot; 3, &quot;c&quot; 4}
```"></span></td></tr></tbody></table>
```

:::



### obj-filter

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-filter {:a 1, :b 2, :c 3} k/odd?)
```"></span></td><td><span data-qmd="```python
k.obj_filter({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},lambda x : not (0 == (x % 2)))
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-keep

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keep {:a 1, :b 2, :c 3} (fn:&gt; [x] (:? (k/odd? x) x)))
```"></span></td><td><span data-qmd="```python
k.obj_keep(
  {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},
  lambda x : (not (0 == (x % 2))) and x or None
)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-keepf

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keepf {:a 1, :b 2, :c 3} k/odd? k/identity)
```"></span></td><td><span data-qmd="```python
k.obj_keepf({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3},lambda x : not (0 == (x % 2)),k.identity)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-intersection

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-intersection {:a true, :b true} {:c true, :b true})
```"></span></td><td><span data-qmd="```python
k.obj_intersection({&quot;a&quot;:True,&quot;b&quot;:True},{&quot;c&quot;:True,&quot;b&quot;:True})
```"></span></td><td><span data-qmd="```clj
[&quot;b&quot;]
```"></span></td></tr></tbody></table>
```

:::



### obj-difference

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-difference {:a true, :b true} {:c true, :b true}) (k/obj-difference {:c true, :b true} {:a true, :b true})]
```"></span></td><td><span data-qmd="```python
[
  k.obj_difference({&quot;a&quot;:True,&quot;b&quot;:True},{&quot;c&quot;:True,&quot;b&quot;:True}),
  k.obj_difference({&quot;c&quot;:True,&quot;b&quot;:True},{&quot;a&quot;:True,&quot;b&quot;:True})
]
```"></span></td><td><span data-qmd="```clj
[[&quot;c&quot;] [&quot;a&quot;]]
```"></span></td></tr></tbody></table>
```

:::



### obj-keys-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keys-nested {:a {:b {:c 1, :d 2}, :e {:f 4, :g 5}}} [])
```"></span></td><td><span data-qmd="```python
k.obj_keys_nested({&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1,&quot;d&quot;:2},&quot;e&quot;:{&quot;f&quot;:4,&quot;g&quot;:5}}},[])
```"></span></td><td><span data-qmd="```clj
[[[&quot;a&quot; &quot;b&quot; &quot;c&quot;] 1] [[&quot;a&quot; &quot;b&quot; &quot;d&quot;] 2] [[&quot;a&quot; &quot;e&quot; &quot;f&quot;] 4] [[&quot;a&quot; &quot;e&quot; &quot;g&quot;] 5]]
```"></span></td></tr></tbody></table>
```

:::



### to-flat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/to-flat {:a 1, :b 2, :c 3}) (k/to-flat (k/obj-pairs {:a 1, :b 2, :c 3}))]
```"></span></td><td><span data-qmd="```python
[
  k.to_flat({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}),
  k.to_flat(k.obj_pairs({&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}))
]
```"></span></td><td><span data-qmd="```clj
[[&quot;a&quot; 1 &quot;b&quot; 2 &quot;c&quot; 3] [&quot;a&quot; 1 &quot;b&quot; 2 &quot;c&quot; 3]]
```"></span></td></tr></tbody></table>
```

:::



### from-flat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/from-flat [&quot;a&quot; 1 &quot;b&quot; 2 &quot;c&quot; 3] k/step-set-key {})
```"></span></td><td><span data-qmd="```python
k.from_flat([&quot;a&quot;,1,&quot;b&quot;,2,&quot;c&quot;,3],k.step_set_key,{})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### get-in

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-in {:a {:b {:c 1}}} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```python
k.get_in({&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1}}},[&quot;a&quot;,&quot;b&quot;])
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 1}
```"></span></td></tr></tbody></table>
```

:::



### set-in

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out {:a {:b {:c 1}}}) (k/set-in out [&quot;a&quot; &quot;b&quot;] 2) out)
```"></span></td><td><span data-qmd="```python
out = {&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1}}}
k.set_in(out,[&quot;a&quot;,&quot;b&quot;],2)
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; 2}}
```"></span></td></tr></tbody></table>
```

:::



### eq-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/eq-nested {:a {:b {:c 1}}} {:a {:b {:c 1}}}) (k/eq-nested {:a {:b {:c 1}}} {:a {:b {:c 2}}}) (k/eq-nested 1 1) (k/eq-nested 1 2) (k/eq-nested [1] [1]) (k/eq-nested [1] [2]) (k/eq-nested {:a [{:b {:c 1}}]} {:a [{:b {:c 1}}]}) (k/eq-nested {:a [{:b {:c 1}}]} {:a [{:b {:c 2}}]})]
```"></span></td><td><span data-qmd="```python
[
  k.eq_nested({&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1}}},{&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1}}}),
  k.eq_nested({&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:1}}},{&quot;a&quot;:{&quot;b&quot;:{&quot;c&quot;:2}}}),
  k.eq_nested(1,1),
  k.eq_nested(1,2),
  k.eq_nested([1],[1]),
  k.eq_nested([1],[2]),
  k.eq_nested({&quot;a&quot;:[{&quot;b&quot;:{&quot;c&quot;:1}}]},{&quot;a&quot;:[{&quot;b&quot;:{&quot;c&quot;:1}}]}),
  k.eq_nested({&quot;a&quot;:[{&quot;b&quot;:{&quot;c&quot;:1}}]},{&quot;a&quot;:[{&quot;b&quot;:{&quot;c&quot;:2}}]})
]
```"></span></td><td><span data-qmd="```clj
[true false true false true false true false]
```"></span></td></tr></tbody></table>
```

:::



### obj-diff

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-diff {:a 1, :b 2} {:a 1, :c 2})
```"></span></td><td><span data-qmd="```python
k.obj_diff({&quot;a&quot;:1,&quot;b&quot;:2},{&quot;a&quot;:1,&quot;c&quot;:2})
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### obj-diff-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-diff-nested {:a 1, :b 2} {:a 1, :c 2}) (k/obj-diff-nested {:a 1, :b {:c 3}} {:a 1, :b {:d 3}}) (k/obj-diff-nested {:a 1, :b {:c {:d 3}}} {:a 1, :b {:c {:e 3}}})]
```"></span></td><td><span data-qmd="```python
[
  k.obj_diff_nested({&quot;a&quot;:1,&quot;b&quot;:2},{&quot;a&quot;:1,&quot;c&quot;:2}),
  k.obj_diff_nested({&quot;a&quot;:1,&quot;b&quot;:{&quot;c&quot;:3}},{&quot;a&quot;:1,&quot;b&quot;:{&quot;d&quot;:3}}),
  k.obj_diff_nested({&quot;a&quot;:1,&quot;b&quot;:{&quot;c&quot;:{&quot;d&quot;:3}}},{&quot;a&quot;:1,&quot;b&quot;:{&quot;c&quot;:{&quot;e&quot;:3}}})
]
```"></span></td><td><span data-qmd="```clj
[{&quot;c&quot; 2} {&quot;b&quot; {&quot;d&quot; 3}} {&quot;b&quot; {&quot;c&quot; {&quot;e&quot; 3}}}]
```"></span></td></tr></tbody></table>
```

:::



### objify

decodes object if string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/objify &quot;{}&quot;)
```"></span></td><td><span data-qmd="```python
k.objify(&quot;{}&quot;)
```"></span></td><td><span data-qmd="```clj
{}
```"></span></td></tr></tbody></table>
```

:::



### clone-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/clone-nested {:a [1 2 3 {:b [4 5 6]}]})
```"></span></td><td><span data-qmd="```python
k.clone_nested({&quot;a&quot;:[1,2,3,{&quot;b&quot;:[4,5,6]}]})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; [1 2 3 {&quot;b&quot; [4 5 6]}]}
```"></span></td></tr></tbody></table>
```

:::



### walk

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/walk [1 {:a {:b 3}}] (fn [x] (return (:? (k/is-number? x) (+ x 1) x))) k/identity)
```"></span></td><td><span data-qmd="```python
k.walk(
  [1,{&quot;a&quot;:{&quot;b&quot;:3}}],
  lambda x : isinstance(x,(int,float)) and (x + 1) or x,
  k.identity
)
```"></span></td><td><span data-qmd="```clj
[2 {&quot;a&quot; {&quot;b&quot; 4}}]
```"></span></td></tr></tbody></table>
```

:::



### get-data

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-data {:a 1, :b &quot;hello&quot;, :c {:d [1 2 (fn:&gt;)], :e &quot;hello&quot;, :f {:g (fn:&gt;), :h 2}}})
```"></span></td><td><span data-qmd="```python
k.get_data({
  &quot;a&quot;:1,
  &quot;b&quot;:&quot;hello&quot;,
  &quot;c&quot;:{
    &quot;d&quot;:[1,2,lambda : None],
    &quot;e&quot;:&quot;hello&quot;,
    &quot;f&quot;:{&quot;g&quot;:lambda : None,&quot;h&quot;:2}
  }
})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; &quot;hello&quot;, &quot;c&quot; {&quot;d&quot; [1 2 &quot;&lt;function&gt;&quot;], &quot;f&quot; {&quot;g&quot; &quot;&lt;function&gt;&quot;, &quot;h&quot; 2}, &quot;e&quot; &quot;hello&quot;}}
```"></span></td></tr></tbody></table>
```

:::



### get-spec

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-spec {:a 1, :b &quot;hello&quot;, :c {:d [1 2 (fn:&gt;)], :e &quot;hello&quot;, :f {:g (fn:&gt;), :h 2}}})
```"></span></td><td><span data-qmd="```python
k.get_spec({
  &quot;a&quot;:1,
  &quot;b&quot;:&quot;hello&quot;,
  &quot;c&quot;:{
    &quot;d&quot;:[1,2,lambda : None],
    &quot;e&quot;:&quot;hello&quot;,
    &quot;f&quot;:{&quot;g&quot;:lambda : None,&quot;h&quot;:2}
  }
})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; &quot;number&quot;, &quot;b&quot; &quot;string&quot;, &quot;c&quot; {&quot;d&quot; [&quot;number&quot; &quot;number&quot; &quot;function&quot;], &quot;f&quot; {&quot;g&quot; &quot;function&quot;, &quot;h&quot; &quot;number&quot;}, &quot;e&quot; &quot;string&quot;}}
```"></span></td></tr></tbody></table>
```

:::



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/stdlang-docs/blob/main/notebooks/stdlang_book/walkthrough_py.clj">notebooks/stdlang_book/walkthrough_py.clj</a></small></small></pre></div>
```
