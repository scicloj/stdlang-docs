---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    output-file: stdlang_book.walkthrough.html
code-block-background: true
fontsize: 0.9em

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="stdlang_book.walkthrough_files/md-default0.js" type="text/javascript"></script><script src="stdlang_book.walkthrough_files/md-default1.js" type="text/javascript"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js" type="text/javascript"></script><script src="https://cdn.jsdelivr.net/npm/leaflet-providers@2.0.0/leaflet-providers.min.js" type="text/javascript"></script><link href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" rel="stylesheet" type="text/css" />

# Walkthrough ðŸ‘£

Let us briefly explore the std.lang transpiler. 


## Setup


::: {.sourceClojure}
```clojure
(ns stdlang-book.walkthrough
  (:require [std.lang :as l]
            [scicloj.kindly.v4.kind :as kind]
            [scicloj.kindly.v4.api :as kindly]
            [charred.api :as charred]
            [clojure.string :as str]))
```
:::


Stdlang can be used in different ways:
- generate code for different languages
- run the code in different runtimes of those languages

To specify a way to use it, we use `l/script`.

For example, let us define the following two ways,
named `:code` and `:node`.

Here we define `:code` as a way to use the transpiler
to generate Javascript code, but not use it in any runtime.


::: {.sourceClojure}
```clojure
^:kind/println ; just so the return value of this call is displayed nicely
(l/script+ [:code :js])
```
:::



::: {.printedClojure}
```clojure
[#rt:lang[:js]]

```
:::


Here we define `:node` as a way to use the transpiler
go generate Javascript code, and run it in a Node.js runtime.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script+ [:node :js]
           {:runtime :basic})
```
:::



::: {.printedClojure}
```clojure
[#rt.basic[:server/basic :js urp4zq42sdo4 45493 1]]

```
:::


Let us now use these two ways for basic arithmetic.


::: {.sourceClojure}
```clojure
[;; No runtime, just generating code:
 (l/! [:code] (+ 1 2))
 ;; Generating, running in Node.js:
 (l/! [:node] (+ 1 2))]
```
:::



::: {.printedClojure}
```clojure
["1 + 2;" 3]

```
:::



## Language
Let us see how to generate some common Javascript idioms.
We will follow examples from the
[Learn X in Y minutes](https://learnxinyminutes.com/) tutorial
[Where X=Javascript](https://learnxinyminutes.com/javascript).


### Numbers, Strings, and Operators

Number types:

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>node</th></tr></thead><tbody><tr><td><span data-qmd="```clj
3
```"></span></td><td><span data-qmd="```js
3;
```"></span></td><td>3</td></tr><tr><td><span data-qmd="```clj
1.5
```"></span></td><td><span data-qmd="```js
1.5;
```"></span></td><td>1.5</td></tr></tbody></table>
```

:::


Basic arithmetic:

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>node</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(+ 1 1)
```"></span></td><td><span data-qmd="```js
1 + 1;
```"></span></td><td>2</td></tr><tr><td><span data-qmd="```clj
(+ 0.1 0.2)
```"></span></td><td><span data-qmd="```js
0.1 + 0.2;
```"></span></td><td>0.30000000000000004</td></tr><tr><td><span data-qmd="```clj
(- 8 1)
```"></span></td><td><span data-qmd="```js
8 - 1;
```"></span></td><td>7</td></tr><tr><td><span data-qmd="```clj
(* 10 2)
```"></span></td><td><span data-qmd="```js
10 * 2;
```"></span></td><td>20</td></tr><tr><td><span data-qmd="```clj
(/ 35 5)
```"></span></td><td><span data-qmd="```js
35 / 5;
```"></span></td><td>7</td></tr><tr><td><span data-qmd="```clj
(/ 5 2)
```"></span></td><td><span data-qmd="```js
5 / 2;
```"></span></td><td>2.5</td></tr></tbody></table>
```

:::



## Data visualization with Javascript


::: {.sourceClojure}
```clojure
(kind/hiccup
 [:div
  [:script
   (l/! [:code]
        (do (var m (L.map document.currentScript.parentElement))
            (m.setView [-37.84 144.95]
                       11)
            (-> (L.tileLayer.provider "OpenStreetMap.Mapnik")
                (. (addTo m)))
            (-> [-37.9 144.8]
                L.marker
                (. (addTo m))
                (. (bindPopup "<i style='color:purple'>Have you been here?</i>"))
                (. (openPopup)))))]]
 {:html/deps [:leaflet]
  :style {:height "400px"}})
```
:::



```{=html}
<div style="height:400px;"><script>let m = L.map(document.currentScript.parentElement);
m.setView([-37.84,144.95],11);
L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(m);
L.marker([-37.9,144.8]).addTo(m).bindPopup("<i style='color:purple'>Have you been here?</i>").openPopup();</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/stdlang-docs/blob/main/notebooks/stdlang_book/walkthrough.clj">notebooks/stdlang_book/walkthrough.clj</a></small></small></pre></div>
```
