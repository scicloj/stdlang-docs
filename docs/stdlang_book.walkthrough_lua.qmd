---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    output-file: stdlang_book.walkthrough_lua.html
code-block-background: true
fontsize: 0.9em

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="stdlang_book.walkthrough_lua_files/md-default0.js" type="text/javascript"></script><script src="stdlang_book.walkthrough_lua_files/md-default1.js" type="text/javascript"></script>

# Lua Walkthrough

Welcome to the walkthrough of std.lang and it's interaction with the lua runtime.
Ideally, the reader should have at least some experience with both clojure and lua
in order to get the most out of the tutorial as the library allows for seamless interop between
a clojure runtime and a lua one - whether it is on the server side - node, quickjs, osascript - as well as on the browser and other embedded js environments.



## Setup

Let us briefly explore the std.lang transpiler.


::: {.sourceClojure}
```clojure
(ns stdlang-book.walkthrough-lua
  (:require [std.lang :as l]))
```
:::


std.lang can be used in different ways:
- generate code for different languages
- run the code in different runtimes of those languages

To specify a way to use it, we use `l/script`. This will create a runtime
for evaluation.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script :lua
  {:require [[xt.lang.base-lib :as k]]})
```
:::



::: {.printedClojure}
```clojure
#rt:lang[:lua]

```
:::


It is now possible to transpile lisp forms to code:


::: {.sourceClojure}
```clojure
(!.lua
  (+ 1 2 3))
```
:::



::: {.printedClojure}
```clojure
"1 + 2 + 3"

```
:::


If more than one environment is required, `l/script+` is a way to create an annex
that 

In For example, let us define the following two annexes, named `:code` and `:live`.

Here we define `:code` as a way to use the transpiler
to generate Lua code, but not use it in any runtime.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script+ [:code :lua]
  {:require [[xt.lang.base-lib :as k]]})
```
:::



::: {.printedClojure}
```clojure
[#rt:lang[:lua]]

```
:::


Here we define `:live` as a way to use the transpiler
go generate Lua code, and run it in a Node.lua runtime.


::: {.sourceClojure}
```clojure
^:kind/println
(l/script+ [:live :lua]
  {:runtime :basic
   :require [[xt.lang.base-lib :as k]]})
```
:::



::: {.printedClojure}
```clojure
[#rt.basic[:server/basic :lua 1hrm1ote9p7av 53426 1]]

```
:::


Let us now use these two ways for basic arithmetic.


::: {.sourceClojure}
```clojure
[ ;; No runtime, just generating code:
 (l/! [:code] (+ 1 2))
 ;; Generating, running in Node.lua:
 (l/! [:live] (+ 1 2))]
```
:::



::: {.printedClojure}
```clojure
["1 + 2" 3]

```
:::



# Types


## Types - Primitives

The seven primitive data types in Lua are string, number, bigint, boolean, undefined, symbol, and null.
We work with examples from: https://www.w3docs.com/learn-lua/methods-of-primitives.html

From the Lua Runtime perspective, primitives are extremely important to understand for designing fast programs. They offer the following traits:

1. Immutability: Once a primitive value is created, it cannot be altered. For instance, when you create a string, you cannot change its individual characters. Any operation that seems to change a primitive actually creates a new primitive. Example:
2. Memory Efficiency: Primitives are stored directly in the stack memory where the variable is located. This direct storage makes access to primitive values faster and more memory-efficient than objects. Example:
3. Simple and Fast: Primitives are straightforward in their representation, making them simpler and faster to process compared to objects. They don't have the overhead of object properties and methods. Example:


### Null

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
nil
```"></span></td><td><span data-qmd="```lua
nil
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### Undefined

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
undefined
```"></span></td><td><span data-qmd="```lua
undefined
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### Boolean

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
true
```"></span></td><td><span data-qmd="```lua
true
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
false
```"></span></td><td><span data-qmd="```lua
false
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Strings

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
&quot;3&quot;
```"></span></td><td><span data-qmd="```lua
&apos;3&apos;
```"></span></td><td><span data-qmd="```clj
&quot;3&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
&quot;Hello World&quot;
```"></span></td><td><span data-qmd="```lua
&apos;Hello World&apos;
```"></span></td><td><span data-qmd="```clj
&quot;Hello World&quot;
```"></span></td></tr></tbody></table>
```

:::



### Numbers

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
3
```"></span></td><td><span data-qmd="```lua
3
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
1.5
```"></span></td><td><span data-qmd="```lua
1.5
```"></span></td><td><span data-qmd="```clj
1.5
```"></span></td></tr><tr><td><span data-qmd="```clj
1.54444444444444
```"></span></td><td><span data-qmd="```lua
1.54444444444444
```"></span></td><td><span data-qmd="```clj
1.5444444444444
```"></span></td></tr></tbody></table>
```

:::



## Types - Collection


### Arrays

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td><td><span data-qmd="```lua
{1,2,3,4}
```"></span></td><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td></tr><tr><td><span data-qmd="```clj
[&quot;hello&quot; [&quot;world&quot;]]
```"></span></td><td><span data-qmd="```lua
{&apos;hello&apos;,{&apos;world&apos;}}
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; [&quot;world&quot;]]
```"></span></td></tr></tbody></table>
```

:::



### Objects

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
{:a 1, :b 2, :c 3}
```"></span></td><td><span data-qmd="```lua
{a=1,b=2,c=3}
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr><tr><td><span data-qmd="```clj
{:a {:b {:c 3}}}
```"></span></td><td><span data-qmd="```lua
{a={b={c=3}}}
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; {&quot;c&quot; 3}}}
```"></span></td></tr></tbody></table>
```

:::



### Objects - tab

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(tab [&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3])
```"></span></td><td><span data-qmd="```lua
{a=1,b=2,c=3}
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



# Operations


## Operations - Assignment


### Var

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 1) x)
```"></span></td><td><span data-qmd="```lua
local x = 1
x
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### Reassign

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x 1) (:= x 10) x)
```"></span></td><td><span data-qmd="```lua
local x = 1
x = 10
x
```"></span></td><td><span data-qmd="```clj
10
```"></span></td></tr></tbody></table>
```

:::



## Operations - Logic


### Negation

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(not true)
```"></span></td><td><span data-qmd="```lua
not true
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(not false)
```"></span></td><td><span data-qmd="```lua
not false
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(not 1)
```"></span></td><td><span data-qmd="```lua
not 1
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(not 0)
```"></span></td><td><span data-qmd="```lua
not 0
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Or

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(or 0 false)
```"></span></td><td><span data-qmd="```lua
0 or false
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr><tr><td><span data-qmd="```clj
(or 1 false)
```"></span></td><td><span data-qmd="```lua
1 or false
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(or 0 true)
```"></span></td><td><span data-qmd="```lua
0 or true
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### And

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(and 0 false)
```"></span></td><td><span data-qmd="```lua
0 and false
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(and 1 false)
```"></span></td><td><span data-qmd="```lua
1 and false
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(and 0 true)
```"></span></td><td><span data-qmd="```lua
0 and true
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### Ternary

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(:? true 1 2)
```"></span></td><td><span data-qmd="```lua
true and 1 or 2
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(:? (or 0 0) 1 2)
```"></span></td><td><span data-qmd="```lua
(0 or 0) and 1 or 2
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



## Operations - Math


### Addition

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(+ 1 2 3)
```"></span></td><td><span data-qmd="```lua
1 + 2 + 3
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr><tr><td><span data-qmd="```clj
(+ 1 10)
```"></span></td><td><span data-qmd="```lua
1 + 10
```"></span></td><td><span data-qmd="```clj
11
```"></span></td></tr></tbody></table>
```

:::



### Subtraction 

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(- 10)
```"></span></td><td><span data-qmd="```lua
-10
```"></span></td><td><span data-qmd="```clj
-10
```"></span></td></tr><tr><td><span data-qmd="```clj
(- 10 1.1)
```"></span></td><td><span data-qmd="```lua
10 - 1.1
```"></span></td><td><span data-qmd="```clj
8.9
```"></span></td></tr><tr><td><span data-qmd="```clj
(- 4 3 2 1.1)
```"></span></td><td><span data-qmd="```lua
4 - 3 - 2 - 1.1
```"></span></td><td><span data-qmd="```clj
-2.1
```"></span></td></tr></tbody></table>
```

:::



### Multiplication

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(* 10 20)
```"></span></td><td><span data-qmd="```lua
10 * 20
```"></span></td><td><span data-qmd="```clj
200
```"></span></td></tr><tr><td><span data-qmd="```clj
(* 4 3.3 2.2 1.1)
```"></span></td><td><span data-qmd="```lua
4 * 3.3 * 2.2 * 1.1
```"></span></td><td><span data-qmd="```clj
31.944
```"></span></td></tr></tbody></table>
```

:::



### Division

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(/ 10)
```"></span></td><td><span data-qmd="```lua
1 / 10
```"></span></td><td><span data-qmd="```clj
0.1
```"></span></td></tr><tr><td><span data-qmd="```clj
(/ 10 20)
```"></span></td><td><span data-qmd="```lua
10 / 20
```"></span></td><td><span data-qmd="```clj
0.5
```"></span></td></tr><tr><td><span data-qmd="```clj
(/ 4 3.3 2.2 1.1)
```"></span></td><td><span data-qmd="```lua
4 / 3.3 / 2.2 / 1.1
```"></span></td><td><span data-qmd="```clj
0.50087653393439
```"></span></td></tr></tbody></table>
```

:::



### Pow

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(pow 10 2)
```"></span></td><td><span data-qmd="```lua
10 ^ 2
```"></span></td><td><span data-qmd="```clj
100
```"></span></td></tr><tr><td><span data-qmd="```clj
(pow 0.5 0.2)
```"></span></td><td><span data-qmd="```lua
0.5 ^ 0.2
```"></span></td><td><span data-qmd="```clj
0.87055056329612
```"></span></td></tr></tbody></table>
```

:::



### Mod

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(mod 1123 7)
```"></span></td><td><span data-qmd="```lua
1123 % 7
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(mod 1123 7.1)
```"></span></td><td><span data-qmd="```lua
1123 % 7.1
```"></span></td><td><span data-qmd="```clj
1.2
```"></span></td></tr></tbody></table>
```

:::



## Operations - Comparison


### Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(== 1 1)
```"></span></td><td><span data-qmd="```lua
1 == 1
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(== 1 &quot;1&quot;)
```"></span></td><td><span data-qmd="```lua
1 == &apos;1&apos;
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(== &quot;hello&quot; &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
&apos;hello&apos; == &apos;hello&apos;
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### Not Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(not= 1 2)
```"></span></td><td><span data-qmd="```lua
1 ~= 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(not= 1 &quot;1&quot;)
```"></span></td><td><span data-qmd="```lua
1 ~= &apos;1&apos;
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(not= &quot;hello&quot; &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
&apos;hello&apos; ~= &apos;hello&apos;
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Less Than

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&lt; 1 2)
```"></span></td><td><span data-qmd="```lua
1 &lt; 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&lt; 1 1)
```"></span></td><td><span data-qmd="```lua
1 &lt; 1
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Less Than Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&lt;= 1 2)
```"></span></td><td><span data-qmd="```lua
1 &lt;= 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&lt;= 1 1)
```"></span></td><td><span data-qmd="```lua
1 &lt;= 1
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### Greater Than

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&gt; 3 2)
```"></span></td><td><span data-qmd="```lua
3 &gt; 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&gt; 3 3)
```"></span></td><td><span data-qmd="```lua
3 &gt; 3
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### Greater Than Equals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(&gt;= 3 2)
```"></span></td><td><span data-qmd="```lua
3 &gt;= 2
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(&gt;= 3 3)
```"></span></td><td><span data-qmd="```lua
3 &gt;= 3
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



## Operations - Functions

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(fn [x y] (return (+ x y)))
```"></span></td><td><span data-qmd="```lua
function (x,y)
  return x + y
end
```"></span></td><td><span data-qmd="```clj

function: 0x01030fe940
```"></span></td></tr><tr><td><span data-qmd="```clj
(do (var hello (fn [x y] (return (+ x y)))) (hello 1 2))
```"></span></td><td><span data-qmd="```lua
local function hello(x,y)
  return x + y
end
hello(1,2)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



## Operations - Blocks


### if block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var arr [1 2 3 4 5]) (var out) (if (&lt; (x:len arr) 10) (:= out true) (:= out false)) out)
```"></span></td><td><span data-qmd="```lua
local arr = {1,2,3,4,5}
local out
if #arr &lt; 10 then
  out = true
else
  out = false
end
out
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### cond block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var arr [1 2 3 4 5]) (var out) (cond (&lt; (x:len arr) 5) (:= out &quot;1&quot;) (&lt; (x:len arr) 10) (:= out &quot;2&quot;) :else (:= out &quot;3&quot;)) out)
```"></span></td><td><span data-qmd="```lua
local arr = {1,2,3,4,5}
local out
if #arr &lt; 5 then
  out = &apos;1&apos;
elseif #arr &lt; 10 then
  out = &apos;2&apos;
else
  out = &apos;3&apos;
end
out
```"></span></td><td><span data-qmd="```clj
&quot;2&quot;
```"></span></td></tr></tbody></table>
```

:::



### while block

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var x []) (var i 0) (while (&lt; i 5) (x:arr-push x i) (:= i (+ i 1))) x)
```"></span></td><td><span data-qmd="```lua
local x = {}
local i = 0
while i &lt; 5 do
  table.insert(x,i)
  i = (i + 1)
end
x
```"></span></td><td><span data-qmd="```clj
[0 1 2 3 4]
```"></span></td></tr></tbody></table>
```

:::



# Base Lib


## Base Lib - For 


### for:array

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := []) (k/for:array [e [1 2 3 4]] (if (&gt; e 3) (break)) (x:arr-push out e)) out)
```"></span></td><td><span data-qmd="```lua
local out = {}
for _, e in  ipairs({1,2,3,4}) do
  if e &gt; 3 then
    break
  end
  table.insert(out,e)
end
out
```"></span></td><td><span data-qmd="```clj
[1 2 3]
```"></span></td></tr></tbody></table>
```

:::



### for:object

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := []) (var obj := {:a 1, :b 2}) (k/for:object [[k v] obj] (x:arr-push out [k v])) out)
```"></span></td><td><span data-qmd="```lua
local out = {}
local obj = {a=1,b=2}
for k, v in  pairs(obj) do
  table.insert(out,{k,v})
end
out
```"></span></td><td><span data-qmd="```clj
[[&quot;b&quot; 2] [&quot;a&quot; 1]]
```"></span></td></tr></tbody></table>
```

:::



### for:index

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := []) (k/for:index [i [0 10 2]] (x:arr-push out i)) out)
```"></span></td><td><span data-qmd="```lua
local out = {}
for i = 0,10,2 do
  table.insert(out,i)
end
out
```"></span></td><td><span data-qmd="```clj
[0 2 4 6 8 10]
```"></span></td></tr></tbody></table>
```

:::



### for:return

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out) (k/for:return [[ret err] (unpack [nil &quot;ERR&quot;])] {:success (:= out ret), :error (:= out err)}) out)
```"></span></td><td><span data-qmd="```lua
local out
local ret,err = unpack({nil,&apos;ERR&apos;})
if not err then
  out = ret
else
  out = err
end
out
```"></span></td><td><span data-qmd="```clj
&quot;ERR&quot;
```"></span></td></tr></tbody></table>
```

:::



### for:try

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := nil) (k/for:try [[ret err] (do:&gt; (x:err &quot;hello&quot;))] {:success (:= out ret), :error (:= out err)}) out)
```"></span></td><td><span data-qmd="```lua
local out = nil
local ok,out = pcall(function ()
  return   (function ()
      error(&apos;hello&apos;)
    end)()
end)
if ok then
  local ret = out
  out = ret
else
  local err = out
  out = err
end
out
```"></span></td><td><span data-qmd="```clj
&quot;[string \&quot;local out = nil...\&quot;]:4: hello&quot;
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Util


### invoke

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/invoke k/add 1 2)
```"></span></td><td><span data-qmd="```lua
1 + 2
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### unpack

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/unpack [1 2 3]) (k/unpack [4 5 6])]
```"></span></td><td><span data-qmd="```lua
{unpack({1,2,3}),unpack({4,5,6})}
```"></span></td><td><span data-qmd="```clj
[1 4 5 6]
```"></span></td></tr></tbody></table>
```

:::



### apply

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/apply (fn:&gt; [a b] (+ a b)) [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a + b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### eval

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/eval &quot;1+2&quot;)
```"></span></td><td><span data-qmd="```lua
loadstring(&apos;return &apos; .. &apos;1+2&apos;)()
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/eval [&quot;1+2&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return loadstring(&apos;return &apos; .. s)()
end)(unpack({&apos;1+2&apos;}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### len

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/len &quot;1+2&quot;)
```"></span></td><td><span data-qmd="```lua
#(&apos;1+2&apos;)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/len [&quot;1+2&quot;])
```"></span></td><td><span data-qmd="```lua
(function (arr)
  return #(arr)
end)(unpack({&apos;1+2&apos;}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### cat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/cat &quot;1+2&quot; &quot;+3&quot;)
```"></span></td><td><span data-qmd="```lua
&apos;1+2&apos; .. &apos;+3&apos;
```"></span></td><td><span data-qmd="```clj
&quot;1+2+3&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/cat [&quot;1+2&quot; &quot;+3&quot;])
```"></span></td><td><span data-qmd="```lua
unpack({&apos;1+2&apos;,&apos;+3&apos;})
```"></span></td><td><span data-qmd="```clj
&quot;1+2&quot;
```"></span></td></tr></tbody></table>
```

:::



### x:del

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out {:a 1}) (k/x:del (. out [&quot;a&quot;])) out)
```"></span></td><td><span data-qmd="```lua
local out = {a=1}
out[&apos;a&apos;] = nil
out
```"></span></td><td><span data-qmd="```clj
{}
```"></span></td></tr></tbody></table>
```

:::



### x:shell

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var cb {}) (defn call [] (k/x:shell &quot;ls&quot; cb)) (call))
```"></span></td><td><span data-qmd="```lua
local cb = {}
local function call()
  local handle = io.popen(&apos;ls&apos;)
  local res = handle:read(&apos;*a&apos;)
  local f = cb[&apos;success&apos;]
  if f then
    return f(res)
  else
    return res
  end
end
call()
```"></span></td><td><span data-qmd="```clj
&quot;&quot;
```"></span></td></tr></tbody></table>
```

:::



### x:offset

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset)
```"></span></td><td><span data-qmd="```lua
1
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### x:offset-rev

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset-rev)
```"></span></td><td><span data-qmd="```lua
0
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### x:offset-len

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset-len 10)
```"></span></td><td><span data-qmd="```lua
10
```"></span></td><td><span data-qmd="```clj
10
```"></span></td></tr></tbody></table>
```

:::



### x:offset-rlen

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/x:offset-rlen 10)
```"></span></td><td><span data-qmd="```lua
9
```"></span></td><td><span data-qmd="```clj
9
```"></span></td></tr></tbody></table>
```

:::



### nil?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/nil? &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
nil == &apos;hello&apos;
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/nil? [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return nil == x
end)(unpack({&apos;hello&apos;}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### not-nil?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/not-nil? &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
nil ~= &apos;hello&apos;
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/not-nil? [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return nil ~= x
end)(unpack({&apos;hello&apos;}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### to-string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-string 1)
```"></span></td><td><span data-qmd="```lua
tostring(1)
```"></span></td><td><span data-qmd="```clj
&quot;1&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-string [1])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return tostring(obj)
end)(unpack({1}))
```"></span></td><td><span data-qmd="```clj
&quot;1&quot;
```"></span></td></tr></tbody></table>
```

:::



### to-number

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-number &quot;1.1&quot;)
```"></span></td><td><span data-qmd="```lua
tonumber(&apos;1.1&apos;)
```"></span></td><td><span data-qmd="```clj
1.1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-number [&quot;1.1&quot;])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return tonumber(obj)
end)(unpack({&apos;1.1&apos;}))
```"></span></td><td><span data-qmd="```clj
1.1
```"></span></td></tr></tbody></table>
```

:::



### is-string?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-string? &quot;1.1&quot;)
```"></span></td><td><span data-qmd="```lua
&apos;string&apos; == type(&apos;1.1&apos;)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-string? [&quot;1.1&quot;])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return &apos;string&apos; == type(obj)
end)(unpack({&apos;1.1&apos;}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-number?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-number? 1.1)
```"></span></td><td><span data-qmd="```lua
&apos;number&apos; == type(1.1)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-number? [1.1])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return &apos;number&apos; == type(obj)
end)(unpack({1.1}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-integer?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-integer? 1000)
```"></span></td><td><span data-qmd="```lua
0 == (1000 % 1)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-integer? [1000])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return 0 == (obj % 1)
end)(unpack({1000}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-boolean?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-boolean? false)
```"></span></td><td><span data-qmd="```lua
&apos;boolean&apos; == type(false)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-boolean? [false])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return &apos;boolean&apos; == type(obj)
end)(unpack({false}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-function?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-function? (fn [] (return 1)))
```"></span></td><td><span data-qmd="```lua
&apos;function&apos; == type(function ()
  return 1
end)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-function? [(fn [] (return 1))])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return &apos;function&apos; == type(x)
end)(unpack({
  function ()
  return 1
end
}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-array?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-array? [1 2 3 4 5])
```"></span></td><td><span data-qmd="```lua
((&apos;table&apos; == type({1,2,3,4,5})) and (nil ~= ({1,2,3,4,5})[1])) or (&apos;array&apos; == type({1,2,3,4,5}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-array? [[1 2 3 4 5]])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return ((&apos;table&apos; == type(x)) and (nil ~= (x)[1])) or (&apos;array&apos; == type(x))
end)(unpack({{1,2,3,4,5}}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### is-object?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/is-object? {:a 1, :b 2})
```"></span></td><td><span data-qmd="```lua
((&apos;table&apos; == type({a=1,b=2})) and (nil == ({a=1,b=2})[1])) or (&apos;object&apos; == type({a=1,b=2}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/is-object? [{:a 1, :b 2}])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return ((&apos;table&apos; == type(x)) and (nil == (x)[1])) or (&apos;object&apos; == type(x))
end)(unpack({{a=1,b=2}}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### type-native

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do [(k/type-native {}) (k/type-native [1]) (k/type-native (fn [])) (k/type-native 1) (k/type-native &quot;&quot;) (k/type-native true)])
```"></span></td><td><span data-qmd="```lua
{
  k.type_native({}),
  k.type_native({1}),
  k.type_native(function ()
  
end),
  k.type_native(1),
  k.type_native(&apos;&apos;),
  k.type_native(true)
}
```"></span></td><td><span data-qmd="```clj
[&quot;object&quot; &quot;array&quot; &quot;function&quot; &quot;number&quot; &quot;string&quot; &quot;boolean&quot;]
```"></span></td></tr></tbody></table>
```

:::



### type-class

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do [(k/type-class {}) (k/type-class [1]) (k/type-class (fn [])) (k/type-class 1) (k/type-class &quot;&quot;) (k/type-class true)])
```"></span></td><td><span data-qmd="```lua
{
  k.type_class({}),
  k.type_class({1}),
  k.type_class(function ()
  
end),
  k.type_class(1),
  k.type_class(&apos;&apos;),
  k.type_class(true)
}
```"></span></td><td><span data-qmd="```clj
[&quot;object&quot; &quot;array&quot; &quot;function&quot; &quot;number&quot; &quot;string&quot; &quot;boolean&quot;]
```"></span></td></tr></tbody></table>
```

:::



### print

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/print &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
print(&apos;hello&apos;)
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/print [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```lua
print(unpack({&apos;hello&apos;}))
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### random

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/random)
```"></span></td><td><span data-qmd="```lua
math.random()
```"></span></td><td><span data-qmd="```clj
0.82957781845625
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/random [])
```"></span></td><td><span data-qmd="```lua
(function ()
  return math.random()
end)(unpack({}))
```"></span></td><td><span data-qmd="```clj
0.62650828993079
```"></span></td></tr></tbody></table>
```

:::



### now-ms

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/now-ms)
```"></span></td><td><span data-qmd="```lua
math.floor(1000 * os.time())
```"></span></td><td><span data-qmd="```clj
1745738697000
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/now-ms [])
```"></span></td><td><span data-qmd="```lua
(function ()
  return math.floor(1000 * os.time())
end)(unpack({}))
```"></span></td><td><span data-qmd="```clj
1745738697000
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Global


### !:G

Accesses the global object

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(!:G CUSTOM)
```"></span></td><td><span data-qmd="```lua
CUSTOM
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### global-set

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (k/global-set &quot;HELLO&quot; 1) (!:G HELLO))
```"></span></td><td><span data-qmd="```lua
HELLO = 1
HELLO
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### global-has?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (k/global-set &quot;HELLO&quot; 1) (k/global-has? &quot;HELLO&quot;))
```"></span></td><td><span data-qmd="```lua
HELLO = 1
HELLO ~= nil
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### global-del

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (k/global-del &quot;HELLO&quot;) (k/global-has? &quot;HELLO&quot;))
```"></span></td><td><span data-qmd="```lua
HELLO = nil
HELLO ~= nil
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - String


### get-char

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-char &quot;abc&quot; 0)
```"></span></td><td><span data-qmd="```lua
string.byte(&apos;abc&apos;,0)
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/get-char [&quot;abc&quot; 0])
```"></span></td><td><span data-qmd="```lua
(function (s,i)
  return string.byte(s,i)
end)(unpack({&apos;abc&apos;,0}))
```"></span></td><td><span data-qmd="```clj
nil
```"></span></td></tr></tbody></table>
```

:::



### gt-string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/gt-string &quot;a&quot; &quot;b&quot;) (k/gt-string &quot;A&quot; &quot;a&quot;)]
```"></span></td><td><span data-qmd="```lua
{&apos;b&apos; &lt; &apos;a&apos;,&apos;a&apos; &lt; &apos;A&apos;}
```"></span></td><td><span data-qmd="```clj
[false false]
```"></span></td></tr></tbody></table>
```

:::



### lt-string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/lt-string &quot;a&quot; &quot;b&quot;) (k/lt-string &quot;A&quot; &quot;a&quot;)]
```"></span></td><td><span data-qmd="```lua
{&apos;a&apos; &lt; &apos;b&apos;,&apos;A&apos; &lt; &apos;a&apos;}
```"></span></td><td><span data-qmd="```clj
[true true]
```"></span></td></tr></tbody></table>
```

:::



### split

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/split &quot;hello/world&quot; &quot;/&quot;)
```"></span></td><td><span data-qmd="```lua
(function (s,tok)
  local out = {}
  string.gsub(s,string.format(&apos;([^%s]+)&apos;,tok),function (c)
    table.insert(out,c)
  end)
  return out
end)(&apos;hello/world&apos;,&apos;/&apos;)
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; &quot;world&quot;]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/split [&quot;hello/world&quot; &quot;/&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s,tok)
  return   (function (s,tok)
      local out = {}
      string.gsub(s,string.format(&apos;([^%s]+)&apos;,tok),function (c)
        table.insert(out,c)
      end)
      return out
    end)(s,tok)
end)(unpack({&apos;hello/world&apos;,&apos;/&apos;}))
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; &quot;world&quot;]
```"></span></td></tr></tbody></table>
```

:::



### join

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/join &quot;/&quot; [&quot;hello&quot; &quot;world&quot;])
```"></span></td><td><span data-qmd="```lua
table.concat({&apos;hello&apos;,&apos;world&apos;},&apos;/&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello/world&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/join [&quot;/&quot; [&quot;hello&quot; &quot;world&quot;]])
```"></span></td><td><span data-qmd="```lua
(function (s,arr)
  return table.concat(arr,s)
end)(unpack({&apos;/&apos;,{&apos;hello&apos;,&apos;world&apos;}}))
```"></span></td><td><span data-qmd="```clj
&quot;hello/world&quot;
```"></span></td></tr></tbody></table>
```

:::



### replace

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/replace &quot;hello/world&quot; &quot;/&quot; &quot;_&quot;)
```"></span></td><td><span data-qmd="```lua
string.gsub(&apos;hello/world&apos;,&apos;/&apos;,&apos;_&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello_world&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/replace [&quot;hello/world&quot; &quot;/&quot; &quot;_&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s,tok,replacement)
  return string.gsub(s,tok,replacement)
end)(unpack({&apos;hello/world&apos;,&apos;/&apos;,&apos;_&apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;hello_world&quot;
```"></span></td></tr></tbody></table>
```

:::



### index-of

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/index-of &quot;hello/world&quot; &quot;/&quot;)
```"></span></td><td><span data-qmd="```lua
(string.find(&apos;hello/world&apos;,&apos;/&apos;) or -1) - 1
```"></span></td><td><span data-qmd="```clj
5
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/index-of [&quot;hello/world&quot; &quot;/&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s,tok)
  return (string.find(s,tok) or -1) - 1
end)(unpack({&apos;hello/world&apos;,&apos;/&apos;}))
```"></span></td><td><span data-qmd="```clj
5
```"></span></td></tr></tbody></table>
```

:::



### substring

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/substring &quot;hello/world&quot; 3) (k/substring &quot;hello/world&quot; 3 8)]
```"></span></td><td><span data-qmd="```lua
{string.sub(&apos;hello/world&apos;,4),string.sub(&apos;hello/world&apos;,4,8)}
```"></span></td><td><span data-qmd="```clj
[&quot;lo/world&quot; &quot;lo/wo&quot;]
```"></span></td></tr></tbody></table>
```

:::



### to-uppercase

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-uppercase &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
string.upper(&apos;hello&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;HELLO&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-uppercase [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return string.upper(s)
end)(unpack({&apos;hello&apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;HELLO&quot;
```"></span></td></tr></tbody></table>
```

:::



### to-lowercase

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-lowercase &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
string.lower(&apos;hello&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-lowercase [&quot;hello&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return string.lower(s)
end)(unpack({&apos;hello&apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### to-fixed

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/to-fixed 1.2 3)
```"></span></td><td><span data-qmd="```lua
string.format(&apos;%.&apos; .. 3 .. &apos;f&apos;,1.2)
```"></span></td><td><span data-qmd="```clj
&quot;1.200&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/to-fixed [1.2 3])
```"></span></td><td><span data-qmd="```lua
(function (n,digits)
  return string.format(&apos;%.&apos; .. digits .. &apos;f&apos;,n)
end)(unpack({1.2,3}))
```"></span></td><td><span data-qmd="```clj
&quot;1.200&quot;
```"></span></td></tr></tbody></table>
```

:::



### trim

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/trim &quot; \n  hello \n  &quot;)
```"></span></td><td><span data-qmd="```lua
string.gsub(&apos; \n  hello \n  &apos;,&apos;^%s*(.-)%s*$&apos;,&apos;%1&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/trim [&quot; \n  hello \n  &quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return string.gsub(s,&apos;^%s*(.-)%s*$&apos;,&apos;%1&apos;)
end)(unpack({&apos; \n  hello \n  &apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### trim-left

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/trim-left &quot; \n  hello \n  &quot;)
```"></span></td><td><span data-qmd="```lua
string.gsub(&apos; \n  hello \n  &apos;,&apos;^%s*&apos;,&apos;&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello \n  &quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/trim-left [&quot; \n  hello \n  &quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return string.gsub(s,&apos;^%s*&apos;,&apos;&apos;)
end)(unpack({&apos; \n  hello \n  &apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;hello \n  &quot;
```"></span></td></tr></tbody></table>
```

:::



### trim-right

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/trim-right &quot; \n  hello \n  &quot;)
```"></span></td><td><span data-qmd="```lua
string.gsub(&apos; \n  hello \n  &apos;,&apos;^(%s*.-)%s*$&apos;,&apos;%1&apos;)
```"></span></td><td><span data-qmd="```clj
&quot; \n  hello&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/trim-right [&quot; \n  hello \n  &quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return string.gsub(s,&apos;^(%s*.-)%s*$&apos;,&apos;%1&apos;)
end)(unpack({&apos; \n  hello \n  &apos;}))
```"></span></td><td><span data-qmd="```clj
&quot; \n  hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### starts-with?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/starts-with? &quot;Foo Bar&quot; &quot;Foo&quot;)
```"></span></td><td><span data-qmd="```lua
k.starts_withp(&apos;Foo Bar&apos;,&apos;Foo&apos;)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### ends-with?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/ends-with? &quot;Foo Bar&quot; &quot;Bar&quot;)
```"></span></td><td><span data-qmd="```lua
k.ends_withp(&apos;Foo Bar&apos;,&apos;Bar&apos;)
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### capitalize

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/capitalize &quot;hello&quot;)
```"></span></td><td><span data-qmd="```lua
k.capitalize(&apos;hello&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;Hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### decapitalize

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/decapitalize &quot;HELLO&quot;)
```"></span></td><td><span data-qmd="```lua
k.decapitalize(&apos;HELLO&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hELLO&quot;
```"></span></td></tr></tbody></table>
```

:::



### pad-left

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pad-left &quot;000&quot; 5 &quot;-&quot;)
```"></span></td><td><span data-qmd="```lua
k.pad_left(&apos;000&apos;,5,&apos;-&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;--000&quot;
```"></span></td></tr></tbody></table>
```

:::



### pad-right

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pad-right &quot;000&quot; 5 &quot;-&quot;)
```"></span></td><td><span data-qmd="```lua
k.pad_right(&apos;000&apos;,5,&apos;-&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;000--&quot;
```"></span></td></tr></tbody></table>
```

:::



### pad-lines

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pad-lines (k/join &quot;\n&quot; [&quot;hello&quot; &quot;world&quot;]) 2 &quot; &quot;)
```"></span></td><td><span data-qmd="```lua
k.pad_lines(table.concat({&apos;hello&apos;,&apos;world&apos;},&apos;\n&apos;),2,&apos; &apos;)
```"></span></td><td><span data-qmd="```clj
&quot;  hello\n  world&quot;
```"></span></td></tr></tbody></table>
```

:::



### split-long

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/split-long &quot;1234567890123456789012345678901234567890123456789012345678901234567890&quot; 4)
```"></span></td><td><span data-qmd="```lua
k.split_long(
  &apos;1234567890123456789012345678901234567890123456789012345678901234567890&apos;,
  4
)
```"></span></td><td><span data-qmd="```clj
[&quot;1234&quot; &quot;5678&quot; &quot;9012&quot; &quot;3456&quot; &quot;7890&quot; &quot;1234&quot; &quot;5678&quot; &quot;9012&quot; &quot;3456&quot; &quot;7890&quot; &quot;1234&quot; &quot;5678&quot; &quot;9012&quot; &quot;3456&quot; &quot;7890&quot; &quot;1234&quot; &quot;5678&quot; &quot;90&quot;]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Encode


### js-encode

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/js-encode [1 2 {:a [{:b 3}]}])
```"></span></td><td><span data-qmd="```lua
cjson.encode({1,2,{a={{b=3}}}})
```"></span></td><td><span data-qmd="```clj
&quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/js-encode [[1 2 {:a [{:b 3}]}]])
```"></span></td><td><span data-qmd="```lua
(function (obj)
  return cjson.encode(obj)
end)(unpack({{1,2,{a={{b=3}}}}}))
```"></span></td><td><span data-qmd="```clj
&quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;
```"></span></td></tr></tbody></table>
```

:::



### js-decode

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/js-decode &quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;)
```"></span></td><td><span data-qmd="```lua
cjson.decode(&apos;[1,2,{&quot;a&quot;:[{&quot;b&quot;:3}]}]&apos;)
```"></span></td><td><span data-qmd="```clj
[1 2 {&quot;a&quot; [{&quot;b&quot; 3}]}]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/js-decode [&quot;[1,2,{\&quot;a\&quot;:[{\&quot;b\&quot;:3}]}]&quot;])
```"></span></td><td><span data-qmd="```lua
(function (s)
  return cjson.decode(s)
end)(unpack({&apos;[1,2,{&quot;a&quot;:[{&quot;b&quot;:3}]}]&apos;}))
```"></span></td><td><span data-qmd="```clj
[1 2 {&quot;a&quot; [{&quot;b&quot; 3}]}]
```"></span></td></tr></tbody></table>
```

:::



### json-push

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/json-push &quot;[1,2,3]&quot; &quot;4&quot;)
```"></span></td><td><span data-qmd="```lua
string.sub(&apos;[1,2,3]&apos;,1,#&apos;[1,2,3]&apos; - 1) .. &apos;,&apos; .. &apos;4&apos; .. &apos;]&apos;
```"></span></td><td><span data-qmd="```clj
&quot;[1,2,3,4]&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/json-push [&quot;[1,2,3]&quot; &quot;4&quot;])
```"></span></td><td><span data-qmd="```lua
(function (json,e)
  return string.sub(json,1,#json - 1) .. &apos;,&apos; .. e .. &apos;]&apos;
end)(unpack({&apos;[1,2,3]&apos;,&apos;4&apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;[1,2,3,4]&quot;
```"></span></td></tr></tbody></table>
```

:::



### json-push-first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/json-push-first &quot;[1,2,3]&quot; &quot;0&quot;)
```"></span></td><td><span data-qmd="```lua
&apos;[&apos; .. &apos;0&apos; .. &apos;,&apos; .. string.sub(&apos;[1,2,3]&apos;,2)
```"></span></td><td><span data-qmd="```clj
&quot;[0,1,2,3]&quot;
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/json-push-first [&quot;[1,2,3]&quot; &quot;0&quot;])
```"></span></td><td><span data-qmd="```lua
(function (json,e)
  return &apos;[&apos; .. e .. &apos;,&apos; .. string.sub(json,2)
end)(unpack({&apos;[1,2,3]&apos;,&apos;0&apos;}))
```"></span></td><td><span data-qmd="```clj
&quot;[0,1,2,3]&quot;
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Symbol


### sym-full

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sym-full &quot;hello&quot; &quot;world&quot;)
```"></span></td><td><span data-qmd="```lua
k.sym_full(&apos;hello&apos;,&apos;world&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello/world&quot;
```"></span></td></tr></tbody></table>
```

:::



### sym-name

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sym-name &quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```lua
k.sym_name(&apos;hello/world&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;world&quot;
```"></span></td></tr></tbody></table>
```

:::



### sym-ns

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sym-ns &quot;hello/world&quot;) (k/sym-ns &quot;hello&quot;)]
```"></span></td><td><span data-qmd="```lua
k.sym_ns(&apos;hello/world&apos;),k.sym_ns(&apos;hello&apos;)
```"></span></td><td><span data-qmd="```clj
&quot;hello&quot;
```"></span></td></tr></tbody></table>
```

:::



### sym-pair

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sym-pair &quot;hello/world&quot;)
```"></span></td><td><span data-qmd="```lua
k.sym_pair(&apos;hello/world&apos;)
```"></span></td><td><span data-qmd="```clj
[&quot;hello&quot; &quot;world&quot;]
```"></span></td></tr></tbody></table>
```

:::



# Base Lib - Math


## Base Lib - Math Basic


### eq

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/eq 2 2) (k/eq 2 1)]
```"></span></td><td><span data-qmd="```lua
{2 == 2,2 == 1}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/eq [1 1])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a == b
end)(unpack({1,1}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### neq

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/neq 2 2) (k/neq 2 1)]
```"></span></td><td><span data-qmd="```lua
{2 ~= 2,2 ~= 1}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/neq [1 1])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a ~= b
end)(unpack({1,1}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### add

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/add 1 2)
```"></span></td><td><span data-qmd="```lua
1 + 2
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/add [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a + b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr></tbody></table>
```

:::



### sub 

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/sub 1 2)
```"></span></td><td><span data-qmd="```lua
1 - 2
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sub [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a - b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### mul

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/mul 10 10)
```"></span></td><td><span data-qmd="```lua
10 * 10
```"></span></td><td><span data-qmd="```clj
100
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/mul [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a * b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### div

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/div 10 2)
```"></span></td><td><span data-qmd="```lua
10 / 2
```"></span></td><td><span data-qmd="```clj
5
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/div [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a / b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
0.5
```"></span></td></tr></tbody></table>
```

:::



### gt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/gt 2 2) (k/gt 2 1)]
```"></span></td><td><span data-qmd="```lua
{2 &gt; 2,2 &gt; 1}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/gt [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a &gt; b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### lt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/lt 2 2) (k/lt 1 2)]
```"></span></td><td><span data-qmd="```lua
{2 &lt; 2,1 &lt; 2}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/lt [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a &lt; b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### gte

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/gte 2 2) (k/gte 2 1)]
```"></span></td><td><span data-qmd="```lua
{2 &gt;= 2,2 &gt;= 1}
```"></span></td><td><span data-qmd="```clj
[true true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/gte [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a &gt;= b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### lte

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/lte 2 2) (k/lte 1 2)]
```"></span></td><td><span data-qmd="```lua
{2 &lt;= 2,1 &lt;= 2}
```"></span></td><td><span data-qmd="```clj
[true true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/lte [1 2])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return a &lt;= b
end)(unpack({1,2}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### neg

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/neg 1) (k/neg 0) (k/neg -1)]
```"></span></td><td><span data-qmd="```lua
{-(1),-(0),-(-1)}
```"></span></td><td><span data-qmd="```clj
[-1 0 1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/neg [1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return -(x)
end)(unpack({1}))
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### inc

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/inc 1)
```"></span></td><td><span data-qmd="```lua
1 + 1
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/inc [1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return x + 1
end)(unpack({1}))
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### dec

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/dec 1)
```"></span></td><td><span data-qmd="```lua
1 - 1
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/dec [1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return x - 1
end)(unpack({1}))
```"></span></td><td><span data-qmd="```clj
0
```"></span></td></tr></tbody></table>
```

:::



### pow

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/pow 2 3)
```"></span></td><td><span data-qmd="```lua
math.pow(2,3)
```"></span></td><td><span data-qmd="```clj
8
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/pow [5 6])
```"></span></td><td><span data-qmd="```lua
(function (base,n)
  return math.pow(base,n)
end)(unpack({5,6}))
```"></span></td><td><span data-qmd="```clj
15625
```"></span></td></tr></tbody></table>
```

:::



### quot

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/quot 20 3)
```"></span></td><td><span data-qmd="```lua
math.floor(20 / 3)
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/quot [50 6])
```"></span></td><td><span data-qmd="```lua
(function (base,n)
  return math.floor(base / n)
end)(unpack({50,6}))
```"></span></td><td><span data-qmd="```clj
8
```"></span></td></tr></tbody></table>
```

:::



### sqrt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sqrt -1) (k/sqrt 1)]
```"></span></td><td><span data-qmd="```lua
{math.sqrt(-1),math.sqrt(1)}
```"></span></td><td><span data-qmd="```clj

table: 0x0103106cb0
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sqrt [16])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.sqrt(num)
end)(unpack({16}))
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr></tbody></table>
```

:::



### exp

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/exp 3)
```"></span></td><td><span data-qmd="```lua
math.exp(3)
```"></span></td><td><span data-qmd="```clj
20.085536923188
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/exp [6])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.exp(num)
end)(unpack({6}))
```"></span></td><td><span data-qmd="```clj
403.42879349274
```"></span></td></tr></tbody></table>
```

:::



### loge

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/loge 3)
```"></span></td><td><span data-qmd="```lua
math.log(3)
```"></span></td><td><span data-qmd="```clj
1.0986122886681
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/loge [6])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.log(num)
end)(unpack({6}))
```"></span></td><td><span data-qmd="```clj
1.7917594692281
```"></span></td></tr></tbody></table>
```

:::



### log10

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/log10 3)
```"></span></td><td><span data-qmd="```lua
math.log10(3)
```"></span></td><td><span data-qmd="```clj
0.47712125471966
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/log10 [6])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.log10(num)
end)(unpack({6}))
```"></span></td><td><span data-qmd="```clj
0.77815125038364
```"></span></td></tr></tbody></table>
```

:::



### mod

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/mod 20 3)
```"></span></td><td><span data-qmd="```lua
20 % 3
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/mod [50 6])
```"></span></td><td><span data-qmd="```lua
(function (num,denom)
  return num % denom
end)(unpack({50,6}))
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### mod-pos

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(mod -11 10) (k/mod-pos -11 10)]
```"></span></td><td><span data-qmd="```lua
{-11 % 10,k.mod_pos(-11,10)}
```"></span></td><td><span data-qmd="```clj
[9 9]
```"></span></td></tr></tbody></table>
```

:::



### mod-offset

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/mod-offset 20 280 360) (k/mod-offset 280 20 360) (k/mod-offset 280 -80 360) (k/mod-offset 20 -60 360) (k/mod-offset 60 30 360)]
```"></span></td><td><span data-qmd="```lua
{
  k.mod_offset(20,280,360),
  k.mod_offset(280,20,360),
  k.mod_offset(280,-80,360),
  k.mod_offset(20,-60,360),
  k.mod_offset(60,30,360)
}
```"></span></td><td><span data-qmd="```clj
[-100 100 0 -80 -30]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Checks


### zero?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/zero? 1) (k/zero? 0)]
```"></span></td><td><span data-qmd="```lua
{1 == 0,0 == 0}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/zero? [1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return x == 0
end)(unpack({1}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### pos?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/pos? 1) (k/pos? 0)]
```"></span></td><td><span data-qmd="```lua
{1 &gt; 0,0 &gt; 0}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/pos? [-1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return x &gt; 0
end)(unpack({-1}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### neg?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/neg? -1) (k/neg? 0)]
```"></span></td><td><span data-qmd="```lua
{-1 &lt; 0,0 &lt; 0}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/neg? [-1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return x &lt; 0
end)(unpack({-1}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### even?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/even? 2) (k/even? 1)]
```"></span></td><td><span data-qmd="```lua
{0 == (2 % 2),0 == (1 % 2)}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/even? [-1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return 0 == (x % 2)
end)(unpack({-1}))
```"></span></td><td><span data-qmd="```clj
false
```"></span></td></tr></tbody></table>
```

:::



### odd?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/odd? 2) (k/odd? 1)]
```"></span></td><td><span data-qmd="```lua
{not (0 == (2 % 2)),not (0 == (1 % 2))}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/odd? [-1])
```"></span></td><td><span data-qmd="```lua
(function (x)
  return not (0 == (x % 2))
end)(unpack({-1}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Util


### abs

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/abs -1) (k/abs 1)]
```"></span></td><td><span data-qmd="```lua
{math.abs(-1),math.abs(1)}
```"></span></td><td><span data-qmd="```clj
[1 1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/abs [-1])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.abs(num)
end)(unpack({-1}))
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### max

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/max 1 2 3 2)
```"></span></td><td><span data-qmd="```lua
math.max(1,2,3,2)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/max [1 2 3 2])
```"></span></td><td><span data-qmd="```lua
math.max(unpack({1,2,3,2}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### min

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/min 1 2 3 2)
```"></span></td><td><span data-qmd="```lua
math.min(1,2,3,2)
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/min [1 2 3 2])
```"></span></td><td><span data-qmd="```lua
math.max(unpack({1,2,3,2}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### ceil

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/ceil -1.1) (k/ceil 1.1)]
```"></span></td><td><span data-qmd="```lua
{math.ceil(-1.1),math.ceil(1.1)}
```"></span></td><td><span data-qmd="```clj
[-1 2]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/ceil [-1.1])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.ceil(num)
end)(unpack({-1.1}))
```"></span></td><td><span data-qmd="```clj
-1
```"></span></td></tr></tbody></table>
```

:::



### floor

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/floor -1.1) (k/floor 1.1)]
```"></span></td><td><span data-qmd="```lua
{math.floor(-1.1),math.floor(1.1)}
```"></span></td><td><span data-qmd="```clj
[-2 1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/floor [-1.1])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.floor(num)
end)(unpack({-1.1}))
```"></span></td><td><span data-qmd="```clj
-2
```"></span></td></tr></tbody></table>
```

:::



### gcd

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/gcd 10 6)
```"></span></td><td><span data-qmd="```lua
k.gcd(10,6)
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### lcm

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/lcm 10 6)
```"></span></td><td><span data-qmd="```lua
k.lcm(10,6)
```"></span></td><td><span data-qmd="```clj
30
```"></span></td></tr></tbody></table>
```

:::



### mix

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/mix 100 20 0.1)
```"></span></td><td><span data-qmd="```lua
k.mix(100,20,0.1)
```"></span></td><td><span data-qmd="```clj
92
```"></span></td></tr></tbody></table>
```

:::



### sign

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sign -10) (k/sign 10)]
```"></span></td><td><span data-qmd="```lua
{k.sign(-10),k.sign(10)}
```"></span></td><td><span data-qmd="```clj
[-1 1]
```"></span></td></tr></tbody></table>
```

:::



### round

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/round 0.9) (k/round 1.1) (k/round 1.49) (k/round 1.51)]
```"></span></td><td><span data-qmd="```lua
{k.round(0.9),k.round(1.1),k.round(1.49),k.round(1.51)}
```"></span></td><td><span data-qmd="```clj
[1 1 1 2]
```"></span></td></tr></tbody></table>
```

:::



### clamp

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/clamp 0 5 6) (k/clamp 0 5 -1) (k/clamp 0 5 4)]
```"></span></td><td><span data-qmd="```lua
{k.clamp(0,5,6),k.clamp(0,5,-1),k.clamp(0,5,4)}
```"></span></td><td><span data-qmd="```clj
[5 0 4]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Bitwise



### bit-and

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-and 7 4)
```"></span></td><td><span data-qmd="```lua
bit.band(7,4)
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-and [7 4])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return bit.band(a,b)
end)(unpack({7,4}))
```"></span></td><td><span data-qmd="```clj
4
```"></span></td></tr></tbody></table>
```

:::



### bit-or

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-or 3 4)
```"></span></td><td><span data-qmd="```lua
bit.bor(3,4)
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-or [3 4])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return bit.bor(a,b)
end)(unpack({3,4}))
```"></span></td><td><span data-qmd="```clj
7
```"></span></td></tr></tbody></table>
```

:::



### bit-xor

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-xor 3 5)
```"></span></td><td><span data-qmd="```lua
bit.bxor(3,5)
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-xor [3 5])
```"></span></td><td><span data-qmd="```lua
(function (a,b)
  return bit.bxor(a,b)
end)(unpack({3,5}))
```"></span></td><td><span data-qmd="```clj
6
```"></span></td></tr></tbody></table>
```

:::



### bit-lshift

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-lshift 7 1)
```"></span></td><td><span data-qmd="```lua
bit.lshift(7,1)
```"></span></td><td><span data-qmd="```clj
14
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-lshift [7 1])
```"></span></td><td><span data-qmd="```lua
(function (x,n)
  return bit.lshift(x,n)
end)(unpack({7,1}))
```"></span></td><td><span data-qmd="```clj
14
```"></span></td></tr></tbody></table>
```

:::



### bit-rshift

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/bit-rshift 7 1)
```"></span></td><td><span data-qmd="```lua
bit.rshift(7,1)
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/bit-rshift [7 1])
```"></span></td><td><span data-qmd="```lua
(function (x,n)
  return bit.rshift(x,n)
end)(unpack({7,1}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### bit-count

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/bit-count 16) (k/bit-count 10) (k/bit-count 3) (k/bit-count 7)]
```"></span></td><td><span data-qmd="```lua
{k.bit_count(16),k.bit_count(10),k.bit_count(3),k.bit_count(7)}
```"></span></td><td><span data-qmd="```clj
[1 2 2 3]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Math Trigonometry


### sin

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sin (/ 3.14159 4)) (k/sin (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```lua
{math.sin(3.14159 / 4),math.sin(3.14159 / 6)}
```"></span></td><td><span data-qmd="```clj
[0.70710631209356 0.49999961698726]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sin [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.sin(num)
end)(unpack({3.14159 / 4}))
```"></span></td><td><span data-qmd="```clj
0.70710631209356
```"></span></td></tr></tbody></table>
```

:::



### cos

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/cos (/ 3.14159 4)) (k/cos (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```lua
{math.cos(3.14159 / 4),math.cos(3.14159 / 6)}
```"></span></td><td><span data-qmd="```clj
[0.70710725027923 0.86602562491684]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/cos [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.cos(num)
end)(unpack({3.14159 / 4}))
```"></span></td><td><span data-qmd="```clj
0.70710725027923
```"></span></td></tr></tbody></table>
```

:::



### tan

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/tan (/ 3.14159 4)) (k/tan (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```lua
{math.tan(3.14159 / 4),math.tan(3.14159 / 6)}
```"></span></td><td><span data-qmd="```clj
[0.99999867320598 0.57734967950316]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/tan [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.tan(num)
end)(unpack({3.14159 / 4}))
```"></span></td><td><span data-qmd="```clj
0.99999867320598
```"></span></td></tr></tbody></table>
```

:::



### asin

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/asin 0.5) (k/asin 0.8)]
```"></span></td><td><span data-qmd="```lua
{math.asin(0.5),math.asin(0.8)}
```"></span></td><td><span data-qmd="```clj
[0.5235987755983 0.92729521800161]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/asin [0.5])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.asin(num)
end)(unpack({0.5}))
```"></span></td><td><span data-qmd="```clj
0.5235987755983
```"></span></td></tr></tbody></table>
```

:::



### acos

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/acos 0.5) (k/acos 0.8)]
```"></span></td><td><span data-qmd="```lua
{math.acos(0.5),math.acos(0.8)}
```"></span></td><td><span data-qmd="```clj
[1.0471975511966 0.64350110879328]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/acos [0.5])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.acos(num)
end)(unpack({0.5}))
```"></span></td><td><span data-qmd="```clj
1.0471975511966
```"></span></td></tr></tbody></table>
```

:::



### atan

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/atan 0.5) (k/atan 0.8)]
```"></span></td><td><span data-qmd="```lua
{math.atan(0.5),math.atan(0.8)}
```"></span></td><td><span data-qmd="```clj
[0.46364760900081 0.67474094222355]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/atan [0.5])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.atan(num)
end)(unpack({0.5}))
```"></span></td><td><span data-qmd="```clj
0.46364760900081
```"></span></td></tr></tbody></table>
```

:::



### sinh

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/sinh (/ 3.14159 4)) (k/sinh (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```lua
{math.sinh(3.14159 / 4),math.sinh(3.14159 / 6)}
```"></span></td><td><span data-qmd="```clj
[0.86867008274391 0.54785296960063]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/sinh [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.sinh(num)
end)(unpack({3.14159 / 4}))
```"></span></td><td><span data-qmd="```clj
0.86867008274391
```"></span></td></tr></tbody></table>
```

:::



### cosh

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/cosh (/ 3.14159 4)) (k/cosh (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```lua
{math.cosh(3.14159 / 4),math.cosh(3.14159 / 6)}
```"></span></td><td><span data-qmd="```clj
[1.3246085129782 1.1402380787801]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/cosh [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.cosh(num)
end)(unpack({3.14159 / 4}))
```"></span></td><td><span data-qmd="```clj
1.3246085129782
```"></span></td></tr></tbody></table>
```

:::



### tanh

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/tanh (/ 3.14159 4)) (k/tanh (/ 3.14159 6))]
```"></span></td><td><span data-qmd="```lua
{math.tanh(3.14159 / 4),math.tanh(3.14159 / 6)}
```"></span></td><td><span data-qmd="```clj
[0.65579382453977 0.48047243799009]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/tanh [(/ 3.14159 4)])
```"></span></td><td><span data-qmd="```lua
(function (num)
  return math.tanh(num)
end)(unpack({3.14159 / 4}))
```"></span></td><td><span data-qmd="```clj
0.65579382453977
```"></span></td></tr></tbody></table>
```

:::



# Base Lib - Collection


## Base Lib - Sequence


### first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/first [1 2 3])
```"></span></td><td><span data-qmd="```lua
({1,2,3})[1]
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/first [[1 2 3]]])
```"></span></td><td><span data-qmd="```lua
(function (arr)
  return arr[1]
end)(unpack({{1,2,3}}))
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### second

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/second [1 2 3])
```"></span></td><td><span data-qmd="```lua
({1,2,3})[2]
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/second [[1 2 3]]])
```"></span></td><td><span data-qmd="```lua
(function (arr)
  return arr[2]
end)(unpack({{1,2,3}}))
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### nth

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/nth [1 2 3] 2)
```"></span></td><td><span data-qmd="```lua
({1,2,3})[3]
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/nth [[1 2 3] 2]])
```"></span></td><td><span data-qmd="```lua
(function (arr,i)
  return arr[i + 1]
end)(unpack({{1,2,3},2}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### last

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/last [1 2 3])
```"></span></td><td><span data-qmd="```lua
({1,2,3})[#{1,2,3} + 0]
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/last [[1 2 3]]])
```"></span></td><td><span data-qmd="```lua
(function (arr)
  return arr[#arr + 0]
end)(unpack({{1,2,3}}))
```"></span></td><td><span data-qmd="```clj
3
```"></span></td></tr></tbody></table>
```

:::



### second-last

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/second-last [1 2 3])
```"></span></td><td><span data-qmd="```lua
({1,2,3})[#{1,2,3} + -1]
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply [k/second-last [[1 2 3]]])
```"></span></td><td><span data-qmd="```lua
(function (arr)
  return arr[#arr + -1]
end)(unpack({{1,2,3}}))
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### get-idx

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/get-idx [1 2 3] 1) (k/get-idx [1 2 3] 2)]
```"></span></td><td><span data-qmd="```lua
{({1,2,3})[1],({1,2,3})[2]}
```"></span></td><td><span data-qmd="```clj
[1 2]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/get-idx [[1 2 3] 1])
```"></span></td><td><span data-qmd="```lua
(function (arr,i,d)
  return arr[i] or d
end)(unpack({{1,2,3},1}))
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### set-idx

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := [1 2 3 4 5]) (k/set-idx out 2 5) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3,4,5}
out[2] = 5
out
```"></span></td><td><span data-qmd="```clj
[1 5 3 4 5]
```"></span></td></tr></tbody></table>
```

:::



### is-empty?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/is-empty? nil) (k/is-empty? &quot;&quot;) (k/is-empty? &quot;123&quot;) (k/is-empty? []) (k/is-empty? [1 2 3]) (k/is-empty? {}) (k/is-empty? {:a 1, :b 2})]
```"></span></td><td><span data-qmd="```lua
{
  k.is_emptyp(nil),
  k.is_emptyp(&apos;&apos;),
  k.is_emptyp(&apos;123&apos;),
  k.is_emptyp({}),
  k.is_emptyp({1,2,3}),
  k.is_emptyp({}),
  k.is_emptyp({a=1,b=2})
}
```"></span></td><td><span data-qmd="```clj
[true true false true false true false]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Keys


### has-key?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/has-key? {:a 1} &quot;a&quot;) (k/has-key? {:a 1} &quot;b&quot;)]
```"></span></td><td><span data-qmd="```lua
{({a=1})[&apos;a&apos;] ~= nil,({a=1})[&apos;b&apos;] ~= nil}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/has-key? [{:a 1} &quot;a&quot;])
```"></span></td><td><span data-qmd="```lua
(function (obj,k)
  return obj[k] ~= nil
end)(unpack({{a=1},&apos;a&apos;}))
```"></span></td><td><span data-qmd="```clj
true
```"></span></td></tr></tbody></table>
```

:::



### del-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1, :b 2}) (k/del-key out &quot;a&quot;) out)
```"></span></td><td><span data-qmd="```lua
local out = {a=1,b=2}
out[&apos;a&apos;] = nil
out
```"></span></td><td><span data-qmd="```clj
{&quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### get-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/get-key {:a 1} &quot;a&quot;) (k/get-key {:a 1} &quot;b&quot;)]
```"></span></td><td><span data-qmd="```lua
{({a=1})[&apos;a&apos;],({a=1})[&apos;b&apos;]}
```"></span></td><td><span data-qmd="```clj
[1]
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/get-key [{:a 1} &quot;a&quot;])
```"></span></td><td><span data-qmd="```lua
(function (obj,k,d)
  return obj[k] or d
end)(unpack({{a=1},&apos;a&apos;}))
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr><tr><td><span data-qmd="```clj
(k/apply k/get-key [{:a 1} &quot;b&quot; 2])
```"></span></td><td><span data-qmd="```lua
(function (obj,k,d)
  return obj[k] or d
end)(unpack({{a=1},&apos;b&apos;,2}))
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### get-path

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/get-path {:a {:b {:c 1}}} [&quot;a&quot; &quot;b&quot; &quot;c&quot;]) (k/get-path {:a 1} [&quot;b&quot;] 2)]
```"></span></td><td><span data-qmd="```lua
{({a={b={c=1}}})[&apos;a&apos;][&apos;b&apos;][&apos;c&apos;],({a=1})[&apos;b&apos;] or 2}
```"></span></td><td><span data-qmd="```clj
[1 2]
```"></span></td></tr></tbody></table>
```

:::



### set-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1, :b 2}) (k/set-key out &quot;a&quot; 5) out)
```"></span></td><td><span data-qmd="```lua
local out = {a=1,b=2}
out[&apos;a&apos;] = 5
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 5, &quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### copy-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {}) (k/copy-key out {:a 1} &quot;a&quot;) out)
```"></span></td><td><span data-qmd="```lua
local out = {}
out[&apos;a&apos;] = ({a=1})[&apos;a&apos;]
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1}
```"></span></td></tr><tr><td><span data-qmd="```clj
(do (var out := {}) (k/copy-key out {:a 1} [&quot;c&quot; &quot;a&quot;]) out)
```"></span></td><td><span data-qmd="```lua
local out = {}
out[&apos;c&apos;] = ({a=1})[&apos;a&apos;]
out
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 1}
```"></span></td></tr></tbody></table>
```

:::



### swap-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1, :b 2}) (k/swap-key out &quot;a&quot; k/inc) out)
```"></span></td><td><span data-qmd="```lua
local out = {a=1,b=2}
out[&apos;a&apos;] = (out[&apos;a&apos;] + 1)
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 2, &quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Array


### x:arr-push

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-push out 4) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3}
table.insert(out,4)
out
```"></span></td><td><span data-qmd="```clj
[1 2 3 4]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-pop

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-pop out) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3}
table.remove(out)
out
```"></span></td><td><span data-qmd="```clj
[1 2]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-push-first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-push-first out 0) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3}
table.insert(out,1,0)
out
```"></span></td><td><span data-qmd="```clj
[0 1 2 3]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-pop-first

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-pop-first out) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3}
table.remove(out,1)
out
```"></span></td><td><span data-qmd="```clj
[2 3]
```"></span></td></tr></tbody></table>
```

:::



### x:arr-insert

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/x:arr-insert out (x:offset 2) &quot;a&quot;) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3}
table.insert(out,3,&apos;a&apos;)
out
```"></span></td><td><span data-qmd="```clj
[1 2 &quot;a&quot; 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-lookup

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-lookup [&quot;a&quot; &quot;b&quot; &quot;c&quot;])
```"></span></td><td><span data-qmd="```lua
k.arr_lookup({&apos;a&apos;,&apos;b&apos;,&apos;c&apos;})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; true, &quot;b&quot; true, &quot;c&quot; true}
```"></span></td></tr></tbody></table>
```

:::



### arr-every

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-every [1 2 3] k/odd?) (k/arr-every [1 3] k/odd?)]
```"></span></td><td><span data-qmd="```lua
{
  k.arr_every({1,2,3},function (x)
  return not (0 == (x % 2))
end),
  k.arr_every({1,3},function (x)
  return not (0 == (x % 2))
end)
}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr></tbody></table>
```

:::



### arr-some

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-some [1 2 3] k/even?) (k/arr-some [1 3] k/even?)]
```"></span></td><td><span data-qmd="```lua
{
  k.arr_some({1,2,3},function (x)
  return 0 == (x % 2)
end),
  k.arr_some({1,3},function (x)
  return 0 == (x % 2)
end)
}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr></tbody></table>
```

:::



### arr-each

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out []) (k/arr-each [1 2 3 4 5] (fn [e] (x:arr-push out (+ 1 e)))) out)
```"></span></td><td><span data-qmd="```lua
local out = {}
k.arr_each({1,2,3,4,5},function (e)
  table.insert(out,1 + e)
end)
out
```"></span></td><td><span data-qmd="```clj
[2 3 4 5 6]
```"></span></td></tr></tbody></table>
```

:::



### arr-omit

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-omit [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] 2)
```"></span></td><td><span data-qmd="```lua
k.arr_omit({&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;},2)
```"></span></td><td><span data-qmd="```clj
[&quot;a&quot; &quot;b&quot; &quot;d&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-reverse

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-reverse [1 2 3 4 5])
```"></span></td><td><span data-qmd="```lua
k.arr_reverse({1,2,3,4,5})
```"></span></td><td><span data-qmd="```clj
[5 4 3 2 1]
```"></span></td></tr></tbody></table>
```

:::



### arr-find

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-find [1 2 3 4 5] (fn:&gt; [x] (== x 3)))
```"></span></td><td><span data-qmd="```lua
k.arr_find({1,2,3,4,5},function (x)
  return x == 3
end)
```"></span></td><td><span data-qmd="```clj
2
```"></span></td></tr></tbody></table>
```

:::



### arr-zip

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-zip [&quot;a&quot; &quot;b&quot; &quot;c&quot;] [1 2 3])
```"></span></td><td><span data-qmd="```lua
k.arr_zip({&apos;a&apos;,&apos;b&apos;,&apos;c&apos;},{1,2,3})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### arr-map

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-map [1 2 3 4 5] k/inc)
```"></span></td><td><span data-qmd="```lua
k.arr_map({1,2,3,4,5},function (x)
  return x + 1
end)
```"></span></td><td><span data-qmd="```clj
[2 3 4 5 6]
```"></span></td></tr></tbody></table>
```

:::



### arr-clone

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-clone [1 2 3])
```"></span></td><td><span data-qmd="```lua
k.arr_clone({1,2,3})
```"></span></td><td><span data-qmd="```clj
[1 2 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-append

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out [1 2 3]) (k/arr-append out [4 5]) out)
```"></span></td><td><span data-qmd="```lua
local out = {1,2,3}
k.arr_append(out,{4,5})
out
```"></span></td><td><span data-qmd="```clj
[1 2 3 4 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-slice

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-slice [1 2 3 4 5] 1 3)
```"></span></td><td><span data-qmd="```lua
k.arr_slice({1,2,3,4,5},1,3)
```"></span></td><td><span data-qmd="```clj
[2 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-rslice

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-rslice [1 2 3 4 5] 1 3)
```"></span></td><td><span data-qmd="```lua
k.arr_rslice({1,2,3,4,5},1,3)
```"></span></td><td><span data-qmd="```clj
[3 2]
```"></span></td></tr></tbody></table>
```

:::



### arr-tail

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-tail [1 2 3 4 5] 3)
```"></span></td><td><span data-qmd="```lua
k.arr_tail({1,2,3,4,5},3)
```"></span></td><td><span data-qmd="```clj
[5 4 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-mapcat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-mapcat [1 2 3] (fn:&gt; [k] [k k k]))
```"></span></td><td><span data-qmd="```lua
k.arr_mapcat({1,2,3},function (k)
  return {k,k,k}
end)
```"></span></td><td><span data-qmd="```clj
[1 1 1 2 2 2 3 3 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-partition

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-partition [1 2 3 4 5 6 7 8 9 10] 3)
```"></span></td><td><span data-qmd="```lua
k.arr_partition({1,2,3,4,5,6,7,8,9,10},3)
```"></span></td><td><span data-qmd="```clj
[[1 2 3] [4 5 6] [7 8 9] [10]]
```"></span></td></tr></tbody></table>
```

:::



### arr-filter

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-filter [1 2 3 4 5] k/odd?)
```"></span></td><td><span data-qmd="```lua
k.arr_filter({1,2,3,4,5},function (x)
  return not (0 == (x % 2))
end)
```"></span></td><td><span data-qmd="```clj
[1 3 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-keep

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-keep [1 2 3 4 5] (fn:&gt; [x] (:? (k/odd? x) x)))
```"></span></td><td><span data-qmd="```lua
k.arr_keep({1,2,3,4,5},function (x)
  return not (0 == (x % 2)) and x or nil
end)
```"></span></td><td><span data-qmd="```clj
[1 3 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-keepf

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-keepf [1 2 3 4 5] k/odd? k/identity)
```"></span></td><td><span data-qmd="```lua
k.arr_keepf({1,2,3,4,5},function (x)
  return not (0 == (x % 2))
end,k.identity)
```"></span></td><td><span data-qmd="```clj
[1 3 5]
```"></span></td></tr></tbody></table>
```

:::



### arr-juxt

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-juxt [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3]] k/first k/second)
```"></span></td><td><span data-qmd="```lua
k.arr_juxt({{&apos;a&apos;,1},{&apos;b&apos;,2},{&apos;c&apos;,3}},function (arr)
  return arr[1]
end,function (arr)
  return arr[2]
end)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### arr-foldl

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-foldl [1 2 3 4 5] k/add 0)
```"></span></td><td><span data-qmd="```lua
k.arr_foldl({1,2,3,4,5},function (a,b)
  return a + b
end,0)
```"></span></td><td><span data-qmd="```clj
15
```"></span></td></tr></tbody></table>
```

:::



### arr-foldr

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-foldr [1 2 3 4 5] k/step-push [])
```"></span></td><td><span data-qmd="```lua
k.arr_foldr({1,2,3,4,5},k.step_push,{})
```"></span></td><td><span data-qmd="```clj
[5 4 3 2 1]
```"></span></td></tr></tbody></table>
```

:::



### arr-pipel

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-pipel [(fn:&gt; [x] (* x 10)) (fn:&gt; [x] (+ x 10))] 1)
```"></span></td><td><span data-qmd="```lua
k.arr_pipel({
  function (x)
  return x * 10
end,
  function (x)
  return x + 10
end
},1)
```"></span></td><td><span data-qmd="```clj
20
```"></span></td></tr></tbody></table>
```

:::



### arr-piper

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-piper [(fn:&gt; [x] (* x 10)) (fn:&gt; [x] (+ x 10))] 1)
```"></span></td><td><span data-qmd="```lua
k.arr_piper({
  function (x)
  return x * 10
end,
  function (x)
  return x + 10
end
},1)
```"></span></td><td><span data-qmd="```clj
110
```"></span></td></tr></tbody></table>
```

:::



### arr-group-by

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-group-by [[&quot;a&quot; 1] [&quot;a&quot; 2] [&quot;b&quot; 3] [&quot;b&quot; 4]] k/first k/second)
```"></span></td><td><span data-qmd="```lua
k.arr_group_by({{&apos;a&apos;,1},{&apos;a&apos;,2},{&apos;b&apos;,3},{&apos;b&apos;,4}},function (arr)
  return arr[1]
end,function (arr)
  return arr[2]
end)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; [1 2], &quot;b&quot; [3 4]}
```"></span></td></tr></tbody></table>
```

:::



### arr-range

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-range 10) (k/arr-range [10]) (k/arr-range [2 8]) (k/arr-range [2 9 2])]
```"></span></td><td><span data-qmd="```lua
{
  k.arr_range(10),
  k.arr_range({10}),
  k.arr_range({2,8}),
  k.arr_range({2,9,2})
}
```"></span></td><td><span data-qmd="```clj
[[0 1 2 3 4 5 6 7 8 9] [0 1 2 3 4 5 6 7 8 9] [2 3 4 5 6 7] [2 4 6 8]]
```"></span></td></tr></tbody></table>
```

:::



### arr-intersection

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-intersection [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] [&quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;])
```"></span></td><td><span data-qmd="```lua
k.arr_intersection({&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;},{&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;})
```"></span></td><td><span data-qmd="```clj
[&quot;c&quot; &quot;d&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-difference

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-difference [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] [&quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;])
```"></span></td><td><span data-qmd="```lua
k.arr_difference({&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;},{&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;})
```"></span></td><td><span data-qmd="```clj
[&quot;e&quot; &quot;f&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-union 

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-union [&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot;] [&quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;])
```"></span></td><td><span data-qmd="```lua
k.arr_union({&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;},{&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;})
```"></span></td><td><span data-qmd="```clj
[&quot;c&quot; &quot;a&quot; &quot;f&quot; &quot;b&quot; &quot;d&quot; &quot;e&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-sort

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-sort [3 4 1 2] k/identity (fn:&gt; [a b] (&lt; a b))) (k/arr-sort [3 4 1 2] k/identity (fn:&gt; [a b] (&lt; b a))) (k/arr-sort [[&quot;c&quot; 3] [&quot;d&quot; 4] [&quot;a&quot; 1] [&quot;b&quot; 2]] k/first (fn:&gt; [a b] (x:arr-str-comp a b))) (k/arr-sort [[&quot;c&quot; 3] [&quot;d&quot; 4] [&quot;a&quot; 1] [&quot;b&quot; 2]] k/second (fn:&gt; [a b] (&lt; a b)))]
```"></span></td><td><span data-qmd="```lua
{
  k.arr_sort({3,4,1,2},k.identity,function (a,b)
  return a &lt; b
end),
  k.arr_sort({3,4,1,2},k.identity,function (a,b)
  return b &lt; a
end),
  k.arr_sort({{&apos;c&apos;,3},{&apos;d&apos;,4},{&apos;a&apos;,1},{&apos;b&apos;,2}},function (arr)
  return arr[1]
end,function (a,b)
  return a &lt; b
end),
  k.arr_sort({{&apos;c&apos;,3},{&apos;d&apos;,4},{&apos;a&apos;,1},{&apos;b&apos;,2}},function (arr)
  return arr[2]
end,function (a,b)
  return a &lt; b
end)
}
```"></span></td><td><span data-qmd="```clj
[[1 2 3 4] [4 3 2 1] [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3] [&quot;d&quot; 4]] [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3] [&quot;d&quot; 4]]]
```"></span></td></tr></tbody></table>
```

:::



### arr-sorted-merge

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-sorted-merge [1 2 3] [4 5 6] k/lt) (k/arr-sorted-merge [1 2 4] [3 5 6] k/lt) (k/arr-sorted-merge (k/arr-reverse [1 2 4]) (k/arr-reverse [3 5 6]) k/gt)]
```"></span></td><td><span data-qmd="```lua
{
  k.arr_sorted_merge({1,2,3},{4,5,6},function (a,b)
  return a &lt; b
end),
  k.arr_sorted_merge({1,2,4},{3,5,6},function (a,b)
  return a &lt; b
end),
  k.arr_sorted_merge(k.arr_reverse({1,2,4}),k.arr_reverse({3,5,6}),function (a,b)
  return a &gt; b
end)
}
```"></span></td><td><span data-qmd="```clj
[[1 2 3 4 5 6] [1 2 3 4 5 6] [6 5 4 3 2 1]]
```"></span></td></tr></tbody></table>
```

:::



### arr-shuffle

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-shuffle [1 2 3 4 5])
```"></span></td><td><span data-qmd="```lua
k.arr_shuffle({1,2,3,4,5})
```"></span></td><td><span data-qmd="```clj
[2 4 5 1 3]
```"></span></td></tr></tbody></table>
```

:::



### arr-pushl

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-pushl [1 2 3 4] 5 100) (k/arr-pushl [1 2 3 4] 5 4)]
```"></span></td><td><span data-qmd="```lua
{k.arr_pushl({1,2,3,4},5,100),k.arr_pushl({1,2,3,4},5,4)}
```"></span></td><td><span data-qmd="```clj
[[1 2 3 4 5] [2 3 4 5]]
```"></span></td></tr></tbody></table>
```

:::



### arr-pushr

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-pushr [1 2 3 4] 5 100) (k/arr-pushr [1 2 3 4] 5 4)]
```"></span></td><td><span data-qmd="```lua
{k.arr_pushr({1,2,3,4},5,100),k.arr_pushr({1,2,3,4},5,4)}
```"></span></td><td><span data-qmd="```clj
[[5 1 2 3 4] [5 1 2 3]]
```"></span></td></tr></tbody></table>
```

:::



### arr-join

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-join [&quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot;] &quot; &quot;)
```"></span></td><td><span data-qmd="```lua
k.arr_join({&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;},&apos; &apos;)
```"></span></td><td><span data-qmd="```clj
&quot;1 2 3 4&quot;
```"></span></td></tr></tbody></table>
```

:::



### arr-interpose

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-interpose [&quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot;] &quot;XX&quot;)
```"></span></td><td><span data-qmd="```lua
k.arr_interpose({&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;},&apos;XX&apos;)
```"></span></td><td><span data-qmd="```clj
[&quot;1&quot; &quot;XX&quot; &quot;2&quot; &quot;XX&quot; &quot;3&quot; &quot;XX&quot; &quot;4&quot;]
```"></span></td></tr></tbody></table>
```

:::



### arr-repeat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arr-repeat &quot;1&quot; 4) (k/arr-repeat (k/inc-fn -1) 4)]
```"></span></td><td><span data-qmd="```lua
{k.arr_repeat(&apos;1&apos;,4),k.arr_repeat(k.inc_fn(-1),4)}
```"></span></td><td><span data-qmd="```clj
[[&quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot;] [0 1 2 3]]
```"></span></td></tr></tbody></table>
```

:::



### arr-random

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-random [1 2 3 4])
```"></span></td><td><span data-qmd="```lua
k.arr_random({1,2,3,4})
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### arr-normalise

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-normalise [1 2 3 4])
```"></span></td><td><span data-qmd="```lua
k.arr_normalise({1,2,3,4})
```"></span></td><td><span data-qmd="```clj
[0.1 0.2 0.3 0.4]
```"></span></td></tr></tbody></table>
```

:::



### arr-sample

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/arr-sample [&quot;left&quot; &quot;right&quot; &quot;up&quot; &quot;down&quot;] [0.1 0.2 0.3 0.4])
```"></span></td><td><span data-qmd="```lua
k.arr_sample({&apos;left&apos;,&apos;right&apos;,&apos;up&apos;,&apos;down&apos;},{0.1,0.2,0.3,0.4})
```"></span></td><td><span data-qmd="```clj
&quot;up&quot;
```"></span></td></tr></tbody></table>
```

:::



### arrayify

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/arrayify 1) (k/arrayify [1])]
```"></span></td><td><span data-qmd="```lua
{k.arrayify(1),k.arrayify({1})}
```"></span></td><td><span data-qmd="```clj
[[1] [1]]
```"></span></td></tr></tbody></table>
```

:::



## Base Lib - Object


### obj-empty?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-empty? {}) (k/obj-empty? {:a 1})]
```"></span></td><td><span data-qmd="```lua
{k.obj_emptyp({}),k.obj_emptyp({a=1})}
```"></span></td><td><span data-qmd="```clj
[true false]
```"></span></td></tr></tbody></table>
```

:::



### obj-not-empty?

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-not-empty? {}) (k/obj-not-empty? {:a 1})]
```"></span></td><td><span data-qmd="```lua
{k.obj_not_emptyp({}),k.obj_not_emptyp({a=1})}
```"></span></td><td><span data-qmd="```clj
[false true]
```"></span></td></tr></tbody></table>
```

:::



### obj-first-key

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-first-key {:a 1})
```"></span></td><td><span data-qmd="```lua
k.obj_first_key({a=1})
```"></span></td><td><span data-qmd="```clj
&quot;a&quot;
```"></span></td></tr></tbody></table>
```

:::



### obj-first-val

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-first-val {:a 1})
```"></span></td><td><span data-qmd="```lua
k.obj_first_val({a=1})
```"></span></td><td><span data-qmd="```clj
1
```"></span></td></tr></tbody></table>
```

:::



### obj-keys

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keys {:a 1, :b 2})
```"></span></td><td><span data-qmd="```lua
k.obj_keys({a=1,b=2})
```"></span></td><td><span data-qmd="```clj
[&quot;a&quot; &quot;b&quot;]
```"></span></td></tr></tbody></table>
```

:::



### obj-vals

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-vals {:a 1, :b 2})
```"></span></td><td><span data-qmd="```lua
k.obj_vals({a=1,b=2})
```"></span></td><td><span data-qmd="```clj
[1 2]
```"></span></td></tr></tbody></table>
```

:::



### obj-pairs

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-pairs {:a 1, :b 2, :c 2})
```"></span></td><td><span data-qmd="```lua
k.obj_pairs({a=1,b=2,c=2})
```"></span></td><td><span data-qmd="```clj
[[&quot;c&quot; 2] [&quot;a&quot; 1] [&quot;b&quot; 2]]
```"></span></td></tr></tbody></table>
```

:::



### obj-clone

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-clone {:a 1, :b 2, :c 3})
```"></span></td><td><span data-qmd="```lua
k.obj_clone({a=1,b=2,c=3})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-assign

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out := {:a 1}) (k/obj-assign out {:b 2, :c 3}) out)
```"></span></td><td><span data-qmd="```lua
local out = {a=1}
k.obj_assign(out,{b=2,c=3})
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-assign-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-assign-nested {:a 1} {:b 2}) (k/obj-assign-nested {:a {:b {:c 1}}} {:a {:b {:d 1}}})]
```"></span></td><td><span data-qmd="```lua
{
  k.obj_assign_nested({a=1},{b=2}),
  k.obj_assign_nested({a={b={c=1}}},{a={b={d=1}}})
}
```"></span></td><td><span data-qmd="```clj
[{&quot;a&quot; 1, &quot;b&quot; 2} {&quot;a&quot; {&quot;b&quot; {&quot;d&quot; 1, &quot;c&quot; 1}}}]
```"></span></td></tr></tbody></table>
```

:::



### obj-assign-with

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-assign-with {:a {:b true}} {:a {:c true}} k/obj-assign)
```"></span></td><td><span data-qmd="```lua
k.obj_assign_with({a={b=true}},{a={c=true}},k.obj_assign)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; true, &quot;c&quot; true}}
```"></span></td></tr></tbody></table>
```

:::



### obj-from-pairs

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-from-pairs [[&quot;a&quot; 1] [&quot;b&quot; 2] [&quot;c&quot; 3]])
```"></span></td><td><span data-qmd="```lua
k.obj_from_pairs({{&apos;a&apos;,1},{&apos;b&apos;,2},{&apos;c&apos;,3}})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-del

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-del {:a 1, :b 2, :c 3} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```lua
k.obj_del({a=1,b=2,c=3},{&apos;a&apos;,&apos;b&apos;})
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-del-all

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-del-all {:a 1, :b 2, :c 3})
```"></span></td><td><span data-qmd="```lua
k.obj_del_all({a=1,b=2,c=3})
```"></span></td><td><span data-qmd="```clj
{}
```"></span></td></tr></tbody></table>
```

:::



### obj-pick

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-pick {:a 1, :b 2, :c 3} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```lua
k.obj_pick({a=1,b=2,c=3},{&apos;a&apos;,&apos;b&apos;})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### obj-omit

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-omit {:a 1, :b 2, :c 3} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```lua
k.obj_omit({a=1,b=2,c=3},{&apos;a&apos;,&apos;b&apos;})
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-transpose

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-transpose {:a &quot;x&quot;, :b &quot;y&quot;, :c &quot;z&quot;})
```"></span></td><td><span data-qmd="```lua
k.obj_transpose({a=&apos;x&apos;,b=&apos;y&apos;,c=&apos;z&apos;})
```"></span></td><td><span data-qmd="```clj
{&quot;z&quot; &quot;c&quot;, &quot;x&quot; &quot;a&quot;, &quot;y&quot; &quot;b&quot;}
```"></span></td></tr></tbody></table>
```

:::



### obj-nest

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-nest [&quot;a&quot; &quot;b&quot;] 1)
```"></span></td><td><span data-qmd="```lua
k.obj_nest({&apos;a&apos;,&apos;b&apos;},1)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; 1}}
```"></span></td></tr></tbody></table>
```

:::



### obj-map

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-map {:a 1, :b 2, :c 3} k/inc)
```"></span></td><td><span data-qmd="```lua
k.obj_map({a=1,b=2,c=3},function (x)
  return x + 1
end)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 2, &quot;b&quot; 3, &quot;c&quot; 4}
```"></span></td></tr></tbody></table>
```

:::



### obj-filter

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-filter {:a 1, :b 2, :c 3} k/odd?)
```"></span></td><td><span data-qmd="```lua
k.obj_filter({a=1,b=2,c=3},function (x)
  return not (0 == (x % 2))
end)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-keep

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keep {:a 1, :b 2, :c 3} (fn:&gt; [x] (:? (k/odd? x) x)))
```"></span></td><td><span data-qmd="```lua
k.obj_keep({a=1,b=2,c=3},function (x)
  return not (0 == (x % 2)) and x or nil
end)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-keepf

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keepf {:a 1, :b 2, :c 3} k/odd? k/identity)
```"></span></td><td><span data-qmd="```lua
k.obj_keepf({a=1,b=2,c=3},function (x)
  return not (0 == (x % 2))
end,k.identity)
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### obj-intersection

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-intersection {:a true, :b true} {:c true, :b true})
```"></span></td><td><span data-qmd="```lua
k.obj_intersection({a=true,b=true},{c=true,b=true})
```"></span></td><td><span data-qmd="```clj
[&quot;b&quot;]
```"></span></td></tr></tbody></table>
```

:::



### obj-difference

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-difference {:a true, :b true} {:c true, :b true}) (k/obj-difference {:c true, :b true} {:a true, :b true})]
```"></span></td><td><span data-qmd="```lua
{
  k.obj_difference({a=true,b=true},{c=true,b=true}),
  k.obj_difference({c=true,b=true},{a=true,b=true})
}
```"></span></td><td><span data-qmd="```clj
[[&quot;c&quot;] [&quot;a&quot;]]
```"></span></td></tr></tbody></table>
```

:::



### obj-keys-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-keys-nested {:a {:b {:c 1, :d 2}, :e {:f 4, :g 5}}} [])
```"></span></td><td><span data-qmd="```lua
k.obj_keys_nested({a={b={c=1,d=2},e={f=4,g=5}}},{})
```"></span></td><td><span data-qmd="```clj
[[[&quot;a&quot; &quot;b&quot; &quot;d&quot;] 2] [[&quot;a&quot; &quot;b&quot; &quot;c&quot;] 1] [[&quot;a&quot; &quot;e&quot; &quot;f&quot;] 4] [[&quot;a&quot; &quot;e&quot; &quot;g&quot;] 5]]
```"></span></td></tr></tbody></table>
```

:::



### to-flat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/to-flat {:a 1, :b 2, :c 3}) (k/to-flat (k/obj-pairs {:a 1, :b 2, :c 3}))]
```"></span></td><td><span data-qmd="```lua
{
  k.to_flat({a=1,b=2,c=3}),
  k.to_flat(k.obj_pairs({a=1,b=2,c=3}))
}
```"></span></td><td><span data-qmd="```clj
[[&quot;c&quot; 3 &quot;a&quot; 1 &quot;b&quot; 2] [&quot;c&quot; 3 &quot;a&quot; 1 &quot;b&quot; 2]]
```"></span></td></tr></tbody></table>
```

:::



### from-flat

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/from-flat [&quot;a&quot; 1 &quot;b&quot; 2 &quot;c&quot; 3] k/step-set-key {})
```"></span></td><td><span data-qmd="```lua
k.from_flat({&apos;a&apos;,1,&apos;b&apos;,2,&apos;c&apos;,3},k.step_set_key,{})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}
```"></span></td></tr></tbody></table>
```

:::



### get-in

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-in {:a {:b {:c 1}}} [&quot;a&quot; &quot;b&quot;])
```"></span></td><td><span data-qmd="```lua
k.get_in({a={b={c=1}}},{&apos;a&apos;,&apos;b&apos;})
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 1}
```"></span></td></tr></tbody></table>
```

:::



### set-in

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(do (var out {:a {:b {:c 1}}}) (k/set-in out [&quot;a&quot; &quot;b&quot;] 2) out)
```"></span></td><td><span data-qmd="```lua
local out = {a={b={c=1}}}
k.set_in(out,{&apos;a&apos;,&apos;b&apos;},2)
out
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; {&quot;b&quot; 2}}
```"></span></td></tr></tbody></table>
```

:::



### eq-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/eq-nested {:a {:b {:c 1}}} {:a {:b {:c 1}}}) (k/eq-nested {:a {:b {:c 1}}} {:a {:b {:c 2}}}) (k/eq-nested 1 1) (k/eq-nested 1 2) (k/eq-nested [1] [1]) (k/eq-nested [1] [2]) (k/eq-nested {:a [{:b {:c 1}}]} {:a [{:b {:c 1}}]}) (k/eq-nested {:a [{:b {:c 1}}]} {:a [{:b {:c 2}}]})]
```"></span></td><td><span data-qmd="```lua
{
  k.eq_nested({a={b={c=1}}},{a={b={c=1}}}),
  k.eq_nested({a={b={c=1}}},{a={b={c=2}}}),
  k.eq_nested(1,1),
  k.eq_nested(1,2),
  k.eq_nested({1},{1}),
  k.eq_nested({1},{2}),
  k.eq_nested({a={{b={c=1}}}},{a={{b={c=1}}}}),
  k.eq_nested({a={{b={c=1}}}},{a={{b={c=2}}}})
}
```"></span></td><td><span data-qmd="```clj
[true false true false true false true false]
```"></span></td></tr></tbody></table>
```

:::



### obj-diff

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/obj-diff {:a 1, :b 2} {:a 1, :c 2})
```"></span></td><td><span data-qmd="```lua
k.obj_diff({a=1,b=2},{a=1,c=2})
```"></span></td><td><span data-qmd="```clj
{&quot;c&quot; 2}
```"></span></td></tr></tbody></table>
```

:::



### obj-diff-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
[(k/obj-diff-nested {:a 1, :b 2} {:a 1, :c 2}) (k/obj-diff-nested {:a 1, :b {:c 3}} {:a 1, :b {:d 3}}) (k/obj-diff-nested {:a 1, :b {:c {:d 3}}} {:a 1, :b {:c {:e 3}}})]
```"></span></td><td><span data-qmd="```lua
{
  k.obj_diff_nested({a=1,b=2},{a=1,c=2}),
  k.obj_diff_nested({a=1,b={c=3}},{a=1,b={d=3}}),
  k.obj_diff_nested({a=1,b={c={d=3}}},{a=1,b={c={e=3}}})
}
```"></span></td><td><span data-qmd="```clj
[{&quot;c&quot; 2} {&quot;b&quot; {&quot;d&quot; 3}} {&quot;b&quot; {&quot;c&quot; {&quot;e&quot; 3}}}]
```"></span></td></tr></tbody></table>
```

:::



### objify

decodes object if string

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/objify &quot;{}&quot;)
```"></span></td><td><span data-qmd="```lua
k.objify(&apos;{}&apos;)
```"></span></td><td><span data-qmd="```clj
{}
```"></span></td></tr></tbody></table>
```

:::



### clone-nested

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/clone-nested {:a [1 2 3 {:b [4 5 6]}]})
```"></span></td><td><span data-qmd="```lua
k.clone_nested({a={1,2,3,{b={4,5,6}}}})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; [1 2 3 {&quot;b&quot; [4 5 6]}]}
```"></span></td></tr></tbody></table>
```

:::



### walk

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/walk [1 {:a {:b 3}}] (fn [x] (return (:? (k/is-number? x) (+ x 1) x))) k/identity)
```"></span></td><td><span data-qmd="```lua
k.walk({1,{a={b=3}}},function (x)
  return (&apos;number&apos; == type(x)) and (x + 1) or x
end,k.identity)
```"></span></td><td><span data-qmd="```clj
[2 {&quot;a&quot; {&quot;b&quot; 4}}]
```"></span></td></tr></tbody></table>
```

:::



### get-data

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-data {:a 1, :b &quot;hello&quot;, :c {:d [1 2 (fn:&gt;)], :e &quot;hello&quot;, :f {:g (fn:&gt;), :h 2}}})
```"></span></td><td><span data-qmd="```lua
k.get_data({
  a=1,
  b=&apos;hello&apos;,
  c={
    d={
      1,
      2,
      function ()
      return nil
    end
    },
    e=&apos;hello&apos;,
    f={
      g=function ()
        return nil
      end,
      h=2
    }
  }
})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; 1, &quot;b&quot; &quot;hello&quot;, &quot;c&quot; {&quot;d&quot; [1 2 &quot;&lt;function&gt;&quot;], &quot;f&quot; {&quot;g&quot; &quot;&lt;function&gt;&quot;, &quot;h&quot; 2}, &quot;e&quot; &quot;hello&quot;}}
```"></span></td></tr></tbody></table>
```

:::



### get-spec

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>form</th><th>code</th><th>live</th></tr></thead><tbody><tr><td><span data-qmd="```clj
(k/get-spec {:a 1, :b &quot;hello&quot;, :c {:d [1 2 (fn:&gt;)], :e &quot;hello&quot;, :f {:g (fn:&gt;), :h 2}}})
```"></span></td><td><span data-qmd="```lua
k.get_spec({
  a=1,
  b=&apos;hello&apos;,
  c={
    d={
      1,
      2,
      function ()
      return nil
    end
    },
    e=&apos;hello&apos;,
    f={
      g=function ()
        return nil
      end,
      h=2
    }
  }
})
```"></span></td><td><span data-qmd="```clj
{&quot;a&quot; &quot;number&quot;, &quot;b&quot; &quot;string&quot;, &quot;c&quot; {&quot;d&quot; [&quot;number&quot; &quot;number&quot; &quot;function&quot;], &quot;f&quot; {&quot;g&quot; &quot;function&quot;, &quot;h&quot; &quot;number&quot;}, &quot;e&quot; &quot;string&quot;}}
```"></span></td></tr></tbody></table>
```

:::



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/stdlang-docs/blob/main/notebooks/stdlang_book/walkthrough_lua.clj">notebooks/stdlang_book/walkthrough_lua.clj</a></small></small></pre></div>
```
